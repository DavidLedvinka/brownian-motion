/-
Copyright (c) 2025 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import BrownianMotion.Continuity.HasBoundedInternalCoveringNumber
import BrownianMotion.Continuity.IsKolmogorovProcess

/-!
# Kolmogorov-Chentsov theorem

-/

open MeasureTheory Filter
open scoped ENNReal NNReal Topology

section aux

theorem lintegral_eq_zero_of_zero_ae {Œ± : Type*} [MeasurableSpace Œ±] {Œº : Measure Œ±}
    {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} : f =·µê[Œº] 0 ‚Üí  ‚à´‚Åª a, f a ‚àÇŒº = 0 :=
  fun h ‚Ü¶ (lintegral_congr_ae h).trans lintegral_zero

-- copied from Etienne's fork
theorem measurable_limUnder {Œπ X E : Type*} [MeasurableSpace X] [TopologicalSpace E] [PolishSpace E]
    [MeasurableSpace E] [BorelSpace E] [Countable Œπ] {l : Filter Œπ}
    [l.IsCountablyGenerated] {f : Œπ ‚Üí X ‚Üí E} [hE : Nonempty E] (hf : ‚àÄ i, Measurable (f i)) :
    Measurable (fun x ‚Ü¶ limUnder l (f ¬∑ x)) := by
  obtain rfl | hl := eq_or_neBot l
  ¬∑ simp [limUnder, Filter.map_bot]
  letI := TopologicalSpace.upgradeIsCompletelyMetrizable
  let e := Classical.choice hE
  let conv := {x | ‚àÉ c, Tendsto (f ¬∑ x) l (ùìù c)}
  have mconv : MeasurableSet conv := measurableSet_exists_tendsto hf
  have : (fun x ‚Ü¶ _root_.limUnder l (f ¬∑ x)) = ((‚Üë) : conv ‚Üí X).extend
      (fun x ‚Ü¶ _root_.limUnder l (f ¬∑ x)) (fun _ ‚Ü¶ e) := by
    ext x
    by_cases hx : x ‚àà conv
    ¬∑ rw [Function.extend_val_apply hx]
    ¬∑ rw [Function.extend_val_apply' hx, limUnder_of_not_tendsto hx]
  rw [this]
  refine (MeasurableEmbedding.subtype_coe mconv).measurable_extend
    (measurable_of_tendsto_metrizable' l
      (fun i ‚Ü¶ (hf i).comp measurable_subtype_coe)
      (tendsto_pi_nhds.2 fun ‚ü®x, ‚ü®c, hc‚ü©‚ü© ‚Ü¶ ?_)) measurable_const
  rwa [hc.limUnder_eq]

lemma _root_.MeasureTheory.Measure.measure_inter_eq_of_measure_eq_measure_univ
    {Œ± : Type*} {_ : MeasurableSpace Œ±} {Œº : Measure Œ±}
    {s t : Set Œ±} (hs : MeasurableSet s) (h : Œº t = Œº .univ)
    (ht_ne_top : Œº t ‚â† ‚àû) : Œº (t ‚à© s) = Œº s := by
  rw [Measure.measure_inter_eq_of_measure_eq hs h (Set.subset_univ _) ht_ne_top, Set.univ_inter]

lemma _root_.MeasureTheory.Measure.measure_inter_eq_of_ae
    {Œ± : Type*} {_ : MeasurableSpace Œ±} {Œº : Measure Œ±} [IsFiniteMeasure Œº]
    {s t : Set Œ±} (hs : MeasurableSet s) (ht : NullMeasurableSet t Œº) (h : ‚àÄ·µê a ‚àÇŒº, a ‚àà t)
    (ht_ne_top : Œº t ‚â† ‚àû) : Œº (t ‚à© s) = Œº s := by
  rw [Measure.measure_inter_eq_of_measure_eq hs _ (Set.subset_univ _) ht_ne_top, Set.univ_inter]
  rwa [ae_iff_measure_eq] at h
  exact ht

end aux

namespace ProbabilityTheory

variable {T Œ© E : Type*} [PseudoEMetricSpace T] {mŒ© : MeasurableSpace Œ©}
  {X : T ‚Üí Œ© ‚Üí E} {c : ‚Ñù‚â•0‚àû} {d p q : ‚Ñù} {M Œ≤ : ‚Ñù‚â•0} {P : Measure Œ©}

section PseudoEMetricSpace

variable [PseudoEMetricSpace E] [MeasurableSpace E] [BorelSpace E]

lemma lintegral_div_edist_le_sum_integral_edist_le (hT : EMetric.diam (Set.univ : Set T) < ‚àû)
    (hX : IsKolmogorovProcess X P p q M)
    (hŒ≤ : 0 < Œ≤) (hp : 0 < p) (hq : 0 < q) {J : Set T} [hJ : Countable J] :
    ‚à´‚Åª œâ, ‚®Ü (s : J) (t : J), edist (X s œâ) (X t œâ) ^ p / edist s t ^ (Œ≤ * p) ‚àÇP
      ‚â§ ‚àë' (k : ‚Ñï), 2 ^ (k * Œ≤ * p)
          * ‚à´‚Åª œâ, ‚®Ü (s : J)
              (t : {t : J // edist s t ‚â§ 2 * 2‚Åª¬π ^ k * (EMetric.diam (.univ : Set T) + 1)}),
                edist (X s œâ) (X t œâ) ^p ‚àÇP := by
  let Œ∑ k := 2‚Åª¬π ^ k * (EMetric.diam (Set.univ : Set T) + 1)
  have hŒ∑_ge (k : ‚Ñï) : 2‚Åª¬π ^ (k : ‚Ñù) ‚â§ Œ∑ k := by simp [Œ∑, mul_add]
  have hŒ∑_succ (k : ‚Ñï) : Œ∑ (k + 1) = 2‚Åª¬π * Œ∑ k := by simp [Œ∑, pow_add, mul_assoc, mul_comm]
  have hŒ∑_lim : Filter.Tendsto Œ∑ Filter.atTop (nhds 0) := by
    unfold Œ∑
    rw [‚Üê zero_mul (EMetric.diam (Set.univ : Set T) + 1)]
    apply ENNReal.Tendsto.mul_const (ENNReal.tendsto_pow_atTop_nhds_zero_of_lt_one (by norm_num))
    simp [‚Üê lt_top_iff_ne_top, hT]
  conv in 2 ^ _ * _ => rw [‚Üê lintegral_const_mul' _ _ (by simp)]
  rw [‚Üê lintegral_tsum (by fun_prop (disch := exact hX))]
  have h_ae : ‚àÄ·µê (œâ : Œ©) ‚àÇP, ‚àÄ (s t : J), edist s t = 0 ‚Üí edist (X s œâ) (X t œâ) = 0 := by
    rw [eventually_countable_forall]; intro s
    rw [eventually_countable_forall]; intro t
    by_cases h_dist : edist s t = 0
    ¬∑ apply Filter.Eventually.mp (IsKolmogorovProcess.edist_eq_zero hX hp hq h_dist)
      filter_upwards with _ h _ using h
    filter_upwards with _ using by simp [h_dist]
  refine lintegral_mono_ae (Filter.Eventually.mp h_ae ?_)
  filter_upwards with œâ h
  rw [iSup_le_iff]; rintro ‚ü®s, hs‚ü©
  rw [iSup_le_iff]; intro ‚ü®t, ht‚ü©
  wlog hst : 0 < edist s t
  ¬∑ simp [(h ‚ü®s, hs‚ü© ‚ü®t, ht‚ü©) <| nonpos_iff_eq_zero.mp (le_of_not_gt hst),
      ENNReal.zero_rpow_of_pos (by positivity)]
  obtain ‚ü®k, lb, ub‚ü© : ‚àÉ k, (Œ∑ k ‚â§ edist s t) ‚àß (edist s t ‚â§ 2 * Œ∑ k) := by
    have hŒ∑_dist : ‚àÉ k, Œ∑ k ‚â§ edist s t :=
      (Filter.Eventually.exists (Filter.Tendsto.eventually_le_const hst hŒ∑_lim))
    refine ‚ü®Nat.find hŒ∑_dist, Nat.find_spec hŒ∑_dist, ?_‚ü©
    match hk : Nat.find hŒ∑_dist with
    | 0 =>
        apply le_trans (EMetric.edist_le_diam_of_mem (Set.mem_univ _) (Set.mem_univ _))
        simp [Œ∑]
        exact le_mul_of_one_le_of_le (by norm_num) (le_add_right (le_refl _))
    | k + 1 =>
        rw [hŒ∑_succ k, ‚Üê mul_assoc, ENNReal.mul_inv_cancel (by norm_num) (by norm_num), one_mul]
        refine le_of_not_ge (Nat.find_min hŒ∑_dist ?_)
        simp [hk]
  refine le_trans ?_ (Summable.le_tsum (ENNReal.summable) k (fun _ _ ‚Ü¶ zero_le _))
  rw [ENNReal.div_eq_inv_mul]
  refine mul_le_mul ?_ ?_ (zero_le _) (zero_le _)
  ¬∑ rw [ENNReal.inv_le_iff_inv_le, ‚Üê ENNReal.inv_rpow, mul_assoc, ENNReal.rpow_mul,
      ENNReal.rpow_le_rpow_iff (by positivity)]
    exact le_trans (hŒ∑_ge k) lb
  apply le_iSup_of_le (i := ‚ü®s, hs‚ü©)
  exact le_iSup_of_le (i := ‚ü®‚ü®t, ht‚ü©, by rwa [mul_assoc]‚ü©) (le_refl _)

noncomputable
-- the `max 0 ...` in the blueprint is performed by `ENNReal.ofReal` here
def constL (T : Type*) [PseudoEMetricSpace T] (c : ‚Ñù‚â•0‚àû) (d p q Œ≤ : ‚Ñù) : ‚Ñù‚â•0‚àû :=
  2 ^ (2 * p + 5 * q + 1) * c * (EMetric.diam (.univ : Set T) + 1) ^ (q - d)
  * ‚àë' (k : ‚Ñï), 2 ^ (k * (Œ≤ * p - (q - d)))
      * (4 ^ d * (ENNReal.ofReal (Real.logb 2 c.toReal + (k + 2) * d)) ^ q
        + Cp d p q)

lemma constL_lt_top (hc : c ‚â† ‚àû) (hd_pos : 0 < d) (hp_pos : 0 < p) (hdq_lt : d < q)
    (hŒ≤_pos : 0 < Œ≤) (hŒ≤_lt : Œ≤ < (q - d) / p) :
    constL T c d p q Œ≤ < ‚àû := by
  sorry

theorem finite_kolmogorov_chentsov
    (hT : HasBoundedInternalCoveringNumber (Set.univ : Set T) c d)
    (hX : IsKolmogorovProcess X P p q M)
    (hd_pos : 0 < d) (hp_pos : 0 < p) (hdq_lt : d < q)
    (hŒ≤_pos : 0 < Œ≤) (hŒ≤_lt : Œ≤ < (q - d) / p) (T' : Set T) [hT' : Finite T'] :
    ‚à´‚Åª œâ, ‚®Ü (s : T') (t : T'), edist (X s œâ) (X t œâ) ^ p / edist s t ^ (Œ≤ * p) ‚àÇP
      ‚â§ M * constL T c d p q Œ≤ := by
  have h_diam : EMetric.diam .univ < ‚àû := hT.diam_lt_top hd_pos
  have hq_pos : 0 < q := lt_trans hd_pos hdq_lt
  simp [constL, ‚Üê ENNReal.tsum_mul_left]
  by_cases h_ae : ‚àÄ·µê (œâ : Œ©) ‚àÇP, ‚àÄ (s t : T'), edist (X s œâ) (X t œâ) = 0
  ¬∑ convert zero_le'
    apply lintegral_eq_zero_of_zero_ae
    filter_upwards [h_ae] with œâ h
    rw [Pi.zero_apply]
    rw [ENNReal.iSup_eq_zero]; rintro ‚ü®s, hs‚ü©
    rw [ENNReal.iSup_eq_zero]; rintro ‚ü®t, ht‚ü©
    simp [h ‚ü®s, hs‚ü© ‚ü®t, ht‚ü©, hp_pos]
  have hM : (M : ‚Ñù‚â•0‚àû) ‚â† 0 := by
    contrapose! h_ae
    rw [Filter.eventually_all]; intro s
    rw [Filter.eventually_all]; intro t
    rw_mod_cast [h_ae] at hX
    exact hX.edist_eq_zero_of_M_eq_zero hp_pos
  have h_diam_zero : 0 < EMetric.diam (.univ : Set T) := by
    contrapose! h_ae
    rw [Filter.eventually_all]; intro s
    rw [Filter.eventually_all]; intro t
    apply hX.edist_eq_zero hp_pos hq_pos
    rw [‚Üê le_zero_iff]
    exact le_trans (EMetric.edist_le_diam_of_mem (Set.mem_univ _) (Set.mem_univ _)) h_ae
  have h_diam_real : 0 < (EMetric.diam (.univ : Set T)).toReal :=
    ENNReal.toReal_pos_iff.mpr ‚ü®h_diam_zero, h_diam‚ü©
  apply le_trans (lintegral_div_edist_le_sum_integral_edist_le h_diam hX hŒ≤_pos hp_pos hq_pos)
  apply ENNReal.tsum_le_tsum
  intro k
  wlog hc : c ‚â† ‚àû
  ¬∑ simp [not_ne_iff.mp hc]
    repeat rw [ENNReal.top_mul]
    ¬∑ rw [ENNReal.mul_top hM]
      exact le_top
    ¬∑ have : 0 < (k + 2) * d := by positivity
      simp [this]
    ¬∑ simp [le_of_lt hdq_lt]
  apply le_trans
  ¬∑ apply mul_le_mul_left'
    refine finite_set_bound_of_edist_le (c := 2 ^ d * c) ?_ hT' hX ?_ hd_pos hp_pos hdq_lt ?_
    ¬∑ exact hT.subset (Set.subset_univ _) hd_pos.le
    ¬∑ finiteness
    ¬∑ simp
  rw [ENNReal.mul_rpow_of_ne_top (by finiteness) (by finiteness), ‚Üê mul_assoc,
    ‚Üê mul_assoc _ (2 ^ ((k : ‚Ñù) * _)), ‚Üê mul_assoc (M : ‚Ñù‚â•0‚àû)]
  refine mul_le_mul' (le_of_eq ?_) ?_
  ¬∑ calc 2 ^ (k * Œ≤ * p) * (2 ^ (2 * p + 4 * q + 1) * M * (2 ^ d * c)
        * ((2 * 2‚Åª¬π ^ k) ^ (q - d) * (EMetric.diam Set.univ + 1) ^ (q - d)))
    _ = 2 ^ (k * Œ≤ * p) * (2 ^ (2 * p + 4 * q + 1) * M * (2 ^ d * c)
        * ((2 ^ (q - d) * 2 ^ (- k * (q - d)))
        * (EMetric.diam (Set.univ : Set T) + 1) ^ (q - d))) := by
      congr
      rw [ENNReal.rpow_mul, ENNReal.mul_rpow_of_nonneg _ _ (by bound), ENNReal.rpow_neg,
        ‚Üê ENNReal.inv_pow, ENNReal.rpow_natCast]
    _ = M * (2 ^ (2 * p + 4 * q + 1) * (2 ^ (q - d) * 2 ^ d)) * c
        * (EMetric.diam (Set.univ : Set T) + 1) ^ (q - d)
        * (2 ^ (k * Œ≤ * p) * 2 ^ (- k * (q - d))) := by ring
    _ = M * 2 ^ (2 * p + 5 * q + 1) * c * (EMetric.diam Set.univ + 1) ^ (q - d)
        * 2 ^ (‚Üëk * (‚ÜëŒ≤ * p - (q - d))) := by
      congr
      ¬∑ rw [‚Üê ENNReal.rpow_add _ _ (by simp) (by simp), ‚Üê ENNReal.rpow_add _ _ (by simp) (by simp)]
        ring_nf
      ¬∑ rw [‚Üê ENNReal.rpow_add _ _ (by simp) (by simp)]
        ring_nf
    _ = _ := by ring
  by_cases hc_zero : c.toReal = 0
  ¬∑ simp [hc_zero]; gcongr; exact zero_le _
  gcongr with k
  simp only [‚Üê ENNReal.rpow_natCast, ENNReal.toReal_mul, ‚Üê ENNReal.toReal_rpow, ENNReal.toReal_inv,
    ENNReal.toReal_ofNat, mul_inv_rev]
  rw [ENNReal.toReal_add (by finiteness) (by finiteness)]
  repeat rw [Real.mul_rpow (by positivity) (by positivity)]
  repeat rw [Real.logb_mul (by positivity) (by positivity)]
  grw [inv_lt_one_of_one_lt‚ÇÄ (by simp [h_diam_real])]
  ¬∑ apply le_of_eq
    rw [(by norm_num : (4 : ‚Ñù) = 2 ^ (2 : ‚Ñù)), ‚Üê Real.inv_rpow (by positivity), inv_inv,
      ‚Üê Real.rpow_neg_one]
    repeat rw [‚Üê Real.rpow_mul (by positivity)]
    repeat rw [Real.logb_rpow (by norm_num) (by norm_num)]
    simp
    ring
  ¬∑ norm_num

theorem countable_kolmogorov_chentsov (hT : HasBoundedInternalCoveringNumber (Set.univ : Set T) c d)
    (hX : IsKolmogorovProcess X P p q M)
    (hd_pos : 0 < d) (hp_pos : 0 < p) (hdq_lt : d < q)
    (hŒ≤_pos : 0 < Œ≤) (hŒ≤_lt : Œ≤ < (q - d) / p)
    (T' : Set T) (hT' : T'.Countable) :
    ‚à´‚Åª œâ, ‚®Ü (s : T') (t : T'), edist (X s œâ) (X t œâ) ^ p / edist s t ^ (Œ≤ * p) ‚àÇP
      ‚â§ M * constL T c d p q Œ≤ := by
  sorry

end PseudoEMetricSpace

section EMetricSpace

variable [EMetricSpace E] [MeasurableSpace E] [BorelSpace E]

lemma ae_iSup_rpow_edist_div_lt_top (hT : HasBoundedInternalCoveringNumber (Set.univ : Set T) c d)
    (hX : IsMeasurableKolmogorovProcess X P p q M)
    (hc : c ‚â† ‚àû) (hd_pos : 0 < d) (hp_pos : 0 < p) (hdq_lt : d < q)
    (hŒ≤_pos : 0 < Œ≤) (hŒ≤_lt : Œ≤ < (q - d) / p)
    {T' : Set T} (hT' : T'.Countable) :
    ‚àÄ·µê œâ ‚àÇP, ‚®Ü (s : T') (t : T'), edist (X s œâ) (X t œâ) ^ p / edist s t ^ (Œ≤ * p) < ‚àû := by
  have : Countable T' := hT'
  refine ae_lt_top' ?_ ((countable_kolmogorov_chentsov hT hX.IsKolmogorovProcess hd_pos hp_pos
    hdq_lt hŒ≤_pos hŒ≤_lt T' hT').trans_lt ?_).ne
  ¬∑ refine AEMeasurable.iSup (fun s ‚Ü¶ AEMeasurable.iSup (fun t ‚Ü¶ ?_))
    exact AEMeasurable.div (hX.measurable_edist.aemeasurable.pow_const _) (by fun_prop)
  ¬∑ exact ENNReal.mul_lt_top (by simp) (constL_lt_top hc hd_pos hp_pos hdq_lt hŒ≤_pos hŒ≤_lt)

omit [MeasurableSpace E] [BorelSpace E] in
def holderSet (X : T ‚Üí Œ© ‚Üí E) (T' : Set T) (p Œ≤ : ‚Ñù) : Set Œ© :=
  {œâ | ‚®Ü (s : T') (t : T'), edist (X s œâ) (X t œâ) ^ p / edist s t ^ (Œ≤ * p) < ‚àû
      ‚àß ‚àÄ (s t : T'), edist s t = 0 ‚Üí edist (X s œâ) (X t œâ) = 0}

omit [MeasurableSpace E] [BorelSpace E] in
lemma measurableSet_holderSet (hX : IsMeasurableKolmogorovProcess X P p q M)
    {T' : Set T} (hT' : T'.Countable) :
    MeasurableSet (holderSet X T' p Œ≤) := by
  have : Countable T' := hT'
  let C œâ := ‚®Ü (s : T') (t : T'), edist (X s œâ) (X t œâ) ^ p / edist s t ^ (Œ≤ * p)
  refine MeasurableSet.inter ?_ ?_
  ¬∑ change MeasurableSet {œâ | C œâ < ‚àû}
    refine measurableSet_lt ?_ (by fun_prop)
    refine Measurable.iSup (fun s ‚Ü¶ Measurable.iSup (fun t ‚Ü¶ ?_))
    exact Measurable.div (hX.measurable_edist.pow_const _) (by fun_prop)
  ¬∑ have : {œâ | ‚àÄ (s t : T'), edist s t = 0 ‚Üí edist (X s œâ) (X t œâ) = 0}
        = ‚ãÇ (s : T') (t : T'), ({œâ | edist (X s œâ) (X t œâ) = 0} ‚à™ {œâ | edist s t ‚â† 0}) := by
      ext; simp [imp_iff_or_not]
    change MeasurableSet {œâ | ‚àÄ (s t : T'), edist s t = 0 ‚Üí edist (X s œâ) (X t œâ) = 0}
    rw [this]
    refine MeasurableSet.iInter (fun s ‚Ü¶ MeasurableSet.iInter (fun t ‚Ü¶ ?_))
    refine MeasurableSet.union ?_ ?_
    ¬∑ exact MeasurableSet.preimage (measurableSet_singleton 0) hX.measurable_edist
    ¬∑ exact (MeasurableSet.preimage (measurableSet_singleton 0) (by fun_prop)).compl

omit [MeasurableSpace E] [BorelSpace E] in
lemma holder_with_X (hT : HasBoundedInternalCoveringNumber (Set.univ : Set T) c d)
    (hd_pos : 0 < d) (hp_pos : 0 < p) (hŒ≤_pos : 0 < Œ≤)
    {T' : Set T} {œâ : Œ©} (hœâ : œâ ‚àà holderSet X T' p Œ≤) :
    letI C œâ := ‚®Ü (s : T') (t : T'), edist (X s œâ) (X t œâ) ^ p / edist s t ^ (Œ≤ * p)
    HolderWith (C œâ ^ p‚Åª¬π).toNNReal Œ≤ fun (t : T') ‚Ü¶ X t œâ := by
  intro s t
  have h_edist_lt_top : edist s t < ‚àû := by
    calc edist s t ‚â§ EMetric.diam (Set.univ : Set T) :=
      EMetric.edist_le_diam_of_mem (Set.mem_univ s) (Set.mem_univ t)
    _ < ‚àû := hT.diam_lt_top hd_pos
  have h_dist_top : edist s t ^ (Œ≤ : ‚Ñù) ‚â† ‚àû
  ¬∑ simp only [ne_eq, ENNReal.rpow_eq_top_iff, NNReal.coe_pos, not_or, not_and, not_lt,
      NNReal.zero_le_coe, implies_true, nonpos_iff_eq_zero, true_and]
    exact fun h_eq_top ‚Ü¶ absurd h_eq_top h_edist_lt_top.ne
  by_cases h_dist_zero : edist s t = 0
  ¬∑ simpa [h_dist_zero, hŒ≤_pos] using hœâ.2 s t h_dist_zero
  rw [‚Üê ENNReal.div_le_iff (by simp [h_dist_zero]) h_dist_top]
  rw [ENNReal.coe_toNNReal]
  swap; ¬∑ exact ENNReal.rpow_ne_top_of_nonneg (by positivity) hœâ.1.ne
  rw [ENNReal.le_rpow_inv_iff hp_pos, ENNReal.div_rpow_of_nonneg _ _ hp_pos.le,
    ‚Üê ENNReal.rpow_mul]
  exact le_iSup‚ÇÇ s t (f := fun (s t : T') ‚Ü¶ edist (X s œâ) (X t œâ) ^ p / edist s t ^ (Œ≤ * p))

lemma _root_.Dense.holderWith_extend {A : Set T} (hA : Dense A) {f : A ‚Üí E} {C Œ≤ : ‚Ñù‚â•0}
    (hf : HolderWith C Œ≤ f) :
    HolderWith C Œ≤ (hA.extend f) := by
  sorry

-- TODO: I (R√©my) gave up on separability of `E`. The measurability checks are driving me crazy.
variable [Nonempty E] [SecondCountableTopology T] [CompleteSpace E] [SecondCountableTopology E]
  [IsFiniteMeasure P]

-- TODO: in this lemma we use the notion of convergence in measure, but since we use `edist` and not
-- `dist`, we can't use the existing definition `TendstoInMeasure`.
lemma exists_modification_holder_aux' (hT : HasBoundedInternalCoveringNumber (Set.univ : Set T) c d)
    (hX : IsMeasurableKolmogorovProcess X P p q M)
    (hc : c ‚â† ‚àû) (hd_pos : 0 < d) (hp_pos : 0 < p) (hdq_lt : d < q)
    (hŒ≤_pos : 0 < Œ≤) (hŒ≤_lt : Œ≤ < (q - d) / p) :
    ‚àÉ Y : T ‚Üí Œ© ‚Üí E, (‚àÄ t, Measurable (Y t)) ‚àß (‚àÄ t, Y t =·µê[P] X t)
      ‚àß ‚àÄ œâ, ‚àÉ C : ‚Ñù‚â•0, HolderWith C Œ≤ (Y ¬∑ œâ) := by
  -- Let `T'` be a countable dense subset of `T`
  obtain ‚ü®T', hT'_countable, hT'_dense‚ü© := TopologicalSpace.exists_countable_dense T
  have : Countable T' := hT'_countable
  have h_ae_zero : ‚àÄ·µê œâ ‚àÇP, ‚àÄ (s t : T'), edist s t = 0 ‚Üí edist (X s œâ) (X t œâ) = 0 := by
    simp_rw [ae_all_iff]
    exact fun s t hst ‚Ü¶ hX.IsKolmogorovProcess.edist_eq_zero hp_pos (hd_pos.trans hdq_lt) hst
  -- For each `œâ`, `C œâ < ‚àû` is a bound on `edist (X s œâ) (X t œâ) ^ p / edist s t ^ (Œ≤ * p)`
  let C œâ := ‚®Ü (s : T') (t : T'), edist (X s œâ) (X t œâ) ^ p / edist s t ^ (Œ≤ * p)
  have hC_lt_top : ‚àÄ·µê œâ ‚àÇP, C œâ < ‚àû :=
    ae_iSup_rpow_edist_div_lt_top hT hX hc hd_pos hp_pos hdq_lt hŒ≤_pos hŒ≤_lt hT'_countable
  -- Let `A` be the event that `C œâ < ‚àû` and `X s œâ = X t œâ` for `edist s t = 0`.
  -- This is an event of probability 1.
  let A := holderSet X T' p Œ≤
  have hA : MeasurableSet A := measurableSet_holderSet hX hT'_countable
  have hA_ae : ‚àÄ·µê œâ ‚àÇP, œâ ‚àà A := by
    filter_upwards [hC_lt_top, h_ae_zero] with œâ hœâ‚ÇÅ hœâ‚ÇÇ using ‚ü®hœâ‚ÇÅ, hœâ‚ÇÇ‚ü©
  have h_holder {œâ} (hœâ : œâ ‚àà A) : HolderWith (C œâ ^ p‚Åª¬π).toNNReal Œ≤ fun (t : T') ‚Ü¶ X t œâ :=
    holder_with_X hT hd_pos hp_pos hŒ≤_pos hœâ
  have h_cont {œâ} (hœâ : œâ ‚àà A) : Continuous fun (t : T') ‚Ü¶ X t œâ := (h_holder hœâ).continuous hŒ≤_pos
  let x‚ÇÄ : E := Nonempty.some inferInstance
  classical
  let Y (t : T) (œâ : Œ©) : E := if œâ ‚àà A then hT'_dense.extend (fun t ‚Ü¶ X t œâ) t else x‚ÇÄ
  have hY t : Measurable (Y t) := by
    refine Measurable.ite hA ?_ (by fun_prop)
    -- todo: extract lemma `measurable_extend`
    exact measurable_limUnder (f := fun (t : T') œâ ‚Ü¶ X t œâ) fun t ‚Ü¶ hX.measurable t
  have hY_eq {œâ : Œ©} (hœâ : œâ ‚àà A) (t : T') : Y t œâ = X t œâ := by
    simp only [hœâ, ‚ÜìreduceIte, Y]
    exact hT'_dense.extend_eq (h_cont hœâ) t
  refine ‚ü®Y, hY, fun t ‚Ü¶ ?_, fun œâ ‚Ü¶ ?_‚ü©
  ¬∑ suffices ‚àÄ·µê œâ ‚àÇP, edist (Y t œâ) (X t œâ) ‚â§ 0 by
      filter_upwards [this] with œâ h using by simpa using h
    obtain ‚ü®u, hu‚ü© : ‚àÉ u : ‚Ñï ‚Üí T', Tendsto (fun n ‚Ü¶ (u n : T)) atTop (ùìù t) := by
      have ht_mem_closure : t ‚àà closure T' := by simp [hT'_dense.closure_eq]
      rw [mem_closure_iff_seq_limit] at ht_mem_closure
      obtain ‚ü®u, hu‚ü© := ht_mem_closure
      exact ‚ü®fun n ‚Ü¶ ‚ü®u n, hu.1 n‚ü©, hu.2‚ü©
    have h_le n {œâ} (hœâ : œâ ‚àà A) : edist (Y t œâ) (X t œâ)
        ‚â§ edist (Y t œâ) (Y (u n) œâ) + edist (X (u n) œâ) (X t œâ) := by
      refine (edist_triangle4 (Y t œâ) (Y (u n) œâ) (X (u n) œâ) (X t œâ)).trans_eq ?_
      simp [hY_eq hœâ (u n)]
    -- `X (u n)` converges in measure to `X t`
    have h_tendsto_X (Œµ : ‚Ñù‚â•0‚àû) (hŒµ : 0 < Œµ) :
        Tendsto (fun n ‚Ü¶ P {œâ | Œµ ‚â§ edist (X (u n) œâ) (X t œâ)}) atTop (ùìù 0) := by
      have h_tendsto : Tendsto (fun n ‚Ü¶ ‚à´‚Åª œâ, edist (X (u n) œâ) (X t œâ) ^ p ‚àÇP) atTop (ùìù 0) := by
        refine tendsto_of_tendsto_of_tendsto_of_le_of_le tendsto_const_nhds ?_ (fun _ ‚Ü¶ zero_le')
          (fun n ‚Ü¶ hX.kolmogorovCondition (u n) t)
        have : Tendsto (fun n ‚Ü¶ edist (u n).1 t) atTop (ùìù 0) := by
          rwa [‚Üê tendsto_iff_edist_tendsto_0]
        sorry -- no problem
      sorry -- go to `... ^ p`, use Markov and `h_tendsto`
    -- `Y (u n)` converges in measure to `Y t`
    have h_tendsto_Y (Œµ : ‚Ñù‚â•0‚àû) (hŒµ : 0 < Œµ) :
        Tendsto (fun n ‚Ü¶ P {œâ | Œµ ‚â§ edist (Y (u n) œâ) (Y t œâ)}) atTop (ùìù 0) := by
      sorry -- why?
    refine (ae_le_const_iff_forall_gt_measure_zero _ _).mpr fun Œµ hŒµ ‚Ü¶ ?_
    suffices Tendsto (fun n : ‚Ñï ‚Ü¶ P {œâ | Œµ ‚â§ edist (Y t œâ) (X t œâ)}) atTop (ùìù 0) by
      simpa using this
    have hP_le n : P {œâ | Œµ ‚â§ edist (Y t œâ) (X t œâ)}
        ‚â§ P {œâ | Œµ/2 ‚â§ edist (Y (u n) œâ) (Y t œâ)} + P {œâ | Œµ/2 ‚â§ edist (X (u n) œâ) (X t œâ)} := by
      calc P {œâ | Œµ ‚â§ edist (Y t œâ) (X t œâ)}
      _ = P ({œâ | Œµ ‚â§ edist (Y t œâ) (X t œâ)} ‚à© A) := by
        rw [Set.inter_comm,
          Measure.measure_inter_eq_of_ae _ hA.nullMeasurableSet hA_ae (measure_ne_top _ _)]
        exact measurableSet_le (by fun_prop) (Measurable.edist (hY t) (hX.measurable t))
      _ ‚â§ P ({œâ | Œµ ‚â§ edist (Y (u n) œâ) (Y t œâ) + edist (X (u n) œâ) (X t œâ)} ‚à© A) := by
        refine measure_mono fun œâ ‚Ü¶ ?_
        simp only [Set.mem_inter_iff, Set.mem_setOf_eq, and_imp]
        refine fun hŒµ_le hœâ ‚Ü¶ ‚ü®(hŒµ_le.trans (h_le n hœâ)).trans_eq ?_, hœâ‚ü©
        rw [edist_comm]
      _ = P {œâ | Œµ / 2 + Œµ / 2 ‚â§ edist (Y (u n) œâ) (Y t œâ) + edist (X (u n) œâ) (X t œâ)} := by
        simp only [ENNReal.add_halves]
        rw [Set.inter_comm, Measure.measure_inter_eq_of_ae _ hA.nullMeasurableSet hA_ae
          (measure_ne_top _ _)]
        refine measurableSet_le (by fun_prop) ?_
        exact ((hY (u n)).edist (hY t)).add ((hX.measurable (u n)).edist (hX.measurable t))
      _ ‚â§ P ({œâ | Œµ / 2 ‚â§ edist (Y (u n) œâ) (Y t œâ)}
          ‚à™ {œâ | Œµ / 2 ‚â§ edist (X (u n) œâ) (X t œâ)}) := by
          gcongr
          intro œâ
          simp only [ENNReal.add_halves, Set.mem_setOf_eq, Set.mem_union]
          contrapose!
          intro ‚ü®h1, h2‚ü©
          calc _
          _ < Œµ / 2 + Œµ / 2 := by gcongr
          _ = Œµ := by simp
      _ ‚â§ P {œâ | Œµ / 2 ‚â§ edist (Y (u n) œâ) (Y t œâ)}
          + P {œâ | Œµ / 2 ‚â§ edist (X (u n) œâ) (X t œâ)} := measure_union_le _ _
    refine tendsto_of_tendsto_of_tendsto_of_le_of_le tendsto_const_nhds ?_ (fun _ ‚Ü¶ zero_le') hP_le
    rw [‚Üê add_zero (0 : ‚Ñù‚â•0‚àû)]
    exact Tendsto.add (h_tendsto_Y (Œµ / 2) (ENNReal.half_pos hŒµ.ne'))
      (h_tendsto_X (Œµ / 2) (ENNReal.half_pos hŒµ.ne'))
  ¬∑ by_cases hœâ : œâ ‚àà A
    swap; ¬∑ simp only [hœâ, ‚ÜìreduceIte, Y]; exact ‚ü®0, by simp [HolderWith]‚ü©
    simp only [hœâ, ‚ÜìreduceIte, Y, A]
    refine ‚ü®(C œâ ^ p‚Åª¬π).toNNReal, ?_‚ü©
    refine hT'_dense.holderWith_extend (h_holder hœâ)

lemma exists_modification_holder_aux (hT : HasBoundedInternalCoveringNumber (Set.univ : Set T) c d)
    (hX : IsKolmogorovProcess X P p q M)
    (hc : c ‚â† ‚àû)
    (hd_pos : 0 < d) (hp_pos : 0 < p) (hdq_lt : d < q)
    (hŒ≤_pos : 0 < Œ≤) (hŒ≤_lt : Œ≤ < (q - d) / p) :
    ‚àÉ Y : T ‚Üí Œ© ‚Üí E, (‚àÄ t, Y t =·µê[P] X t) ‚àß ‚àÄ œâ, ‚àÉ C : ‚Ñù‚â•0, HolderWith C Œ≤ (Y ¬∑ œâ) := by
  sorry

lemma exists_modification_holder (hT : HasBoundedInternalCoveringNumber (Set.univ : Set T) c d)
    (hX : IsKolmogorovProcess X P p q M)
    (hd_pos : 0 < d) (hp_pos : 0 < p) (hdq_lt : d < q) :
    ‚àÉ Y : T ‚Üí Œ© ‚Üí E, (‚àÄ t, Y t =·µê[P] X t)
      ‚àß ‚àÄ (Œ≤ : ‚Ñù‚â•0) (hŒ≤_pos : 0 < Œ≤) (hŒ≤_lt : Œ≤ < (q - d) / p),
        ‚àÄ œâ, ‚àÉ C : ‚Ñù‚â•0, HolderWith C Œ≤ (Y ¬∑ œâ) := by
  sorry

lemma exists_modification_holder' {C : ‚Ñï ‚Üí Set T} {c : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû}
    (hC : IsCoverWithBoundedCoveringNumber C (Set.univ : Set T) c (fun _ ‚Ü¶ d))
    (hX : IsKolmogorovProcess X P p q M) (hp_pos : 0 < p) (hdq_lt : d < q) :
    ‚àÉ Y : T ‚Üí Œ© ‚Üí E, (‚àÄ t, Y t =·µê[P] X t)
      ‚àß ‚àÄ (Œ≤ : ‚Ñù‚â•0) (hŒ≤_pos : 0 < Œ≤) (hŒ≤_lt : Œ≤ < (q - d) / p),
        ‚àÄ œâ, ‚àÉ C : ‚Ñù‚â•0, HolderWith C Œ≤ (Y ¬∑ œâ) := by
  sorry

lemma exists_modification_holder_iSup {C : ‚Ñï ‚Üí Set T} {c : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} {p q : ‚Ñï ‚Üí ‚Ñù} {M : ‚Ñï ‚Üí ‚Ñù‚â•0}
    (hC : IsCoverWithBoundedCoveringNumber C (Set.univ : Set T) c (fun _ ‚Ü¶ d))
    (hX : ‚àÄ n, IsKolmogorovProcess X P (p n) (q n) (M n))
    (hp_pos : ‚àÄ n, 0 < p n) (hdq_lt : ‚àÄ n, d < q n) :
    ‚àÉ Y : T ‚Üí Œ© ‚Üí E, (‚àÄ t, Y t =·µê[P] X t)
      ‚àß ‚àÄ (Œ≤ : ‚Ñù‚â•0) (hŒ≤_pos : 0 < Œ≤) (hŒ≤_lt : Œ≤ < ‚®Ü n, (q n - d) / (p n)),
        ‚àÄ œâ, ‚àÉ C : ‚Ñù‚â•0, HolderWith C Œ≤ (Y ¬∑ œâ) := by
  sorry

end EMetricSpace

end ProbabilityTheory
