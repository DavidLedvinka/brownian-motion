/-
Copyright (c) 2025 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import BrownianMotion.Continuity.KolmogorovChentsov
import BrownianMotion.Gaussian.GaussianProcess
import BrownianMotion.Gaussian.Moment
import BrownianMotion.Gaussian.ProjectiveLimit
import Mathlib.Analysis.Normed.Lp.MeasurableSpace
import Mathlib.Topology.ContinuousMap.SecondCountableSpace

/-!
# Brownian motion

-/

open MeasureTheory NNReal WithLp Finset
open scoped ENNReal NNReal Topology

namespace ProbabilityTheory

def preBrownian : ‚Ñù‚â•0 ‚Üí (‚Ñù‚â•0 ‚Üí ‚Ñù) ‚Üí ‚Ñù := fun t œâ ‚Ü¶ œâ t

@[fun_prop]
lemma measurable_preBrownian (t : ‚Ñù‚â•0) : Measurable (preBrownian t) := by
  unfold preBrownian
  fun_prop

lemma hasLaw_preBrownian : HasLaw (fun œâ ‚Ü¶ (preBrownian ¬∑ œâ)) gaussianLimit gaussianLimit where
  aemeasurable := (measurable_pi_lambda _ measurable_preBrownian).aemeasurable
  map_eq := Measure.map_id

lemma hasLaw_restrict_preBrownian (I : Finset ‚Ñù‚â•0) :
    HasLaw (fun œâ ‚Ü¶ I.restrict (preBrownian ¬∑ œâ)) gaussianLimit (gaussianProjectiveFamily I) :=
  hasLaw_restrict_gaussianLimit.comp hasLaw_preBrownian

lemma hasLaw_preBrownian_eval (t : ‚Ñù‚â•0) :
    HasLaw (preBrownian t) gaussianLimit (gaussianReal 0 t) :=
  (hasLaw_eval_gaussianProjectiveFamily ‚ü®t, by simp‚ü©).comp
    (hasLaw_restrict_preBrownian ({t} : Finset ‚Ñù‚â•0))

lemma isGaussianProcess_preBrownian : IsGaussianProcess preBrownian gaussianLimit := by
  intro I
  rw [(hasLaw_restrict_preBrownian I).map_eq]
  exact isGaussian_gaussianProjectiveFamily I

lemma hasLaw_preBrownian_sub (s t : ‚Ñù‚â•0) :
    HasLaw (preBrownian s - preBrownian t) gaussianLimit
      (gaussianReal 0 (max (s - t) (t - s))) := by
  have : preBrownian s - preBrownian t =
      ((fun x ‚Ü¶ x ‚ü®s, by simp‚ü©) - (fun x ‚Ü¶ x ‚ü®t, by simp‚ü©)) ‚àò ({s, t} : Finset ‚Ñù‚â•0).restrict := by
    ext; simp [preBrownian]
  rw [this]
  exact hasLaw_eval_sub_eval_gaussianProjectiveFamily.comp
    hasLaw_restrict_gaussianLimit

lemma isMeasurableKolmogorovProcess_preBrownian (n : ‚Ñï) :
    IsMeasurableKolmogorovProcess preBrownian gaussianLimit (2 * n) n
      (Nat.doubleFactorial (2 * n - 1)) := by
  constructor
  ¬∑ intro s t
    rw [‚Üê BorelSpace.measurable_eq]
    fun_prop
  refine fun s t ‚Ü¶ Eq.le ?_
  norm_cast
  simp_rw [edist_dist, Real.dist_eq]
  change ‚à´‚Åª œâ, (fun x ‚Ü¶ (ENNReal.ofReal |x|) ^ (2 * n))
    ((preBrownian s - preBrownian t) œâ) ‚àÇ_ = _
  rw [(hasLaw_preBrownian_sub s t).lintegral_comp (f := fun x ‚Ü¶ (ENNReal.ofReal |x|) ^ (2 * n))
    (by fun_prop)]
  simp_rw [‚Üê fun x ‚Ü¶ ENNReal.ofReal_pow (abs_nonneg x)]
  rw [‚Üê ofReal_integral_eq_lintegral_ofReal]
  ¬∑ simp_rw [pow_two_mul_abs]
    rw [‚Üê centralMoment_of_integral_id_eq_zero _ (by simp), ‚Üê NNReal.sq_sqrt (max _ _),
    centralMoment_fun_two_mul_gaussianReal, ENNReal.ofReal_mul (by positivity), mul_comm]
    norm_cast
    rw [pow_mul, NNReal.sq_sqrt, ‚Üê ENNReal.ofReal_pow dist_nonneg, ‚Üê NNReal.nndist_eq,
      NNReal.coe_pow, coe_nndist]
  ¬∑ simp_rw [‚Üê Real.norm_eq_abs]
    apply MemLp.integrable_norm_pow'
    exact IsGaussian.memLp_id _ _ (ENNReal.natCast_ne_top (2 * n))
  ¬∑ exact ae_of_all _ fun _ ‚Ü¶ by positivity

lemma exists_brownian :
    ‚àÉ Y : ‚Ñù‚â•0 ‚Üí (‚Ñù‚â•0 ‚Üí ‚Ñù) ‚Üí ‚Ñù, (‚àÄ t, Measurable (Y t)) ‚àß (‚àÄ t, Y t =·µê[gaussianLimit] preBrownian t)
      ‚àß ‚àÄ œâ t (Œ≤ : ‚Ñù‚â•0) (_ : 0 < Œ≤) (_ : Œ≤ < ‚®Ü n, (((n + 2 : ‚Ñï) : ‚Ñù) - 1) / (2 * (n + 2 : ‚Ñï))),
          ‚àÉ U ‚àà ùìù t, ‚àÉ C, HolderOnWith C Œ≤ (Y ¬∑ œâ) U :=
  exists_modification_holder_iSup isCoverWithBoundedCoveringNumber_Ico_nnreal
    (fun n ‚Ü¶ (isMeasurableKolmogorovProcess_preBrownian (n + 2)).isKolmogorovProcess)
    (fun n ‚Ü¶ by finiteness) zero_lt_one (fun n ‚Ü¶ by positivity) (fun n ‚Ü¶ by simp; norm_cast; omega)

noncomputable
def brownian : ‚Ñù‚â•0 ‚Üí (‚Ñù‚â•0 ‚Üí ‚Ñù) ‚Üí ‚Ñù :=
  exists_brownian.choose

@[fun_prop]
lemma measurable_brownian (t : ‚Ñù‚â•0) : Measurable (brownian t) :=
  exists_brownian.choose_spec.1 t

lemma brownian_ae_eq_preBrownian (t : ‚Ñù‚â•0) :
    brownian t =·µê[gaussianLimit] preBrownian t :=
  exists_brownian.choose_spec.2.1 t

lemma memHolder_brownian (œâ : ‚Ñù‚â•0 ‚Üí ‚Ñù) (t : ‚Ñù‚â•0) (Œ≤ : ‚Ñù‚â•0) (hŒ≤_pos : 0 < Œ≤) (hŒ≤_lt : Œ≤ < 2‚Åª¬π) :
    ‚àÉ U ‚àà ùìù t, ‚àÉ C, HolderOnWith C Œ≤ (brownian ¬∑ œâ) U := by
  convert exists_brownian.choose_spec.2.2 œâ t Œ≤ hŒ≤_pos ?_
  suffices ‚®Ü n, (((n + 2 : ‚Ñï) : ‚Ñù) - 1) / (2 * (n + 2 : ‚Ñï)) = 2‚Åª¬π by rw [this]; norm_cast
  refine iSup_eq_of_forall_le_of_tendsto (F := Filter.atTop) (fun n ‚Ü¶ ?_) ?_
  ¬∑ calc
    ((‚Üë(n + 2) : ‚Ñù) - 1) / (2 * ‚Üë(n + 2)) = 2‚Åª¬π * (n + 1) / (n + 2) := by field_simp; ring
    _ ‚â§ 2‚Åª¬π * 1 := by grw [mul_div_assoc, (div_le_one‚ÇÄ (by positivity)).2]; linarith
    _ = 2‚Åª¬π := mul_one _
  ¬∑ have : (fun n : ‚Ñï ‚Ü¶ ((‚Üë(n + 2) : ‚Ñù) - 1) / (2 * ‚Üë(n + 2))) =
        (fun n : ‚Ñï ‚Ü¶ 2‚Åª¬π * ((n : ‚Ñù) / (n + 1))) ‚àò (fun n ‚Ü¶ n + 1) := by ext n; field_simp; ring
    rw [this]
    refine Filter.Tendsto.comp ?_ (Filter.tendsto_add_atTop_nat 1)
    nth_rw 2 [‚Üê mul_one 2‚Åª¬π]
    exact (tendsto_natCast_div_add_atTop (1 : ‚Ñù)).const_mul _

@[fun_prop]
lemma continuous_brownian (œâ : ‚Ñù‚â•0 ‚Üí ‚Ñù) : Continuous (brownian ¬∑ œâ) := by
  refine continuous_iff_continuousAt.mpr fun t ‚Ü¶ ?_
  obtain ‚ü®U, hu_mem, ‚ü®C, h‚ü©‚ü© := memHolder_brownian œâ t 4‚Åª¬π (by norm_num)
    (NNReal.inv_lt_inv (by norm_num) (by norm_num))
  exact (h.continuousOn (by norm_num)).continuousAt hu_mem

lemma hasLaw_restrict_brownian {I : Finset ‚Ñù‚â•0} :
    HasLaw (fun œâ ‚Ü¶ I.restrict (brownian ¬∑ œâ)) gaussianLimit (gaussianProjectiveFamily I) := by
  refine (hasLaw_restrict_preBrownian I).congr ?_
  filter_upwards [ae_all_iff.2 fun i : I ‚Ü¶ brownian_ae_eq_preBrownian i.1] with œâ hœâ
  ext; simp [hœâ]

lemma hasLaw_brownian : HasLaw (fun œâ ‚Ü¶ (brownian ¬∑ œâ)) gaussianLimit gaussianLimit where
  aemeasurable := (measurable_pi_lambda _ measurable_brownian).aemeasurable
  map_eq := by
    symm
    refine isProjectiveLimit_gaussianLimit.unique fun I ‚Ü¶ ?_
    rw [Measure.map_map (by fun_prop) (measurable_pi_lambda _ measurable_brownian)]
    exact hasLaw_restrict_brownian.map_eq

lemma hasLaw_brownian_eval {t : ‚Ñù‚â•0} :
    HasLaw (brownian t) gaussianLimit (gaussianReal 0 t) :=
  (hasLaw_preBrownian_eval t).congr (brownian_ae_eq_preBrownian t)

lemma hasLaw_brownian_sub {s t : ‚Ñù‚â•0} :
    HasLaw (brownian s - brownian t) gaussianLimit (gaussianReal 0 (max (s - t) (t - s))) :=
    (hasLaw_preBrownian_sub s t).congr
      ((brownian_ae_eq_preBrownian s).sub (brownian_ae_eq_preBrownian t))

open NNReal Filter Topology in
lemma measurable_brownian_uncurry : Measurable brownian.uncurry :=
  measurable_uncurry_of_continuous_of_measurable continuous_brownian measurable_brownian

lemma isGaussianProcess_brownian : IsGaussianProcess brownian gaussianLimit :=
  isGaussianProcess_preBrownian.modification fun t ‚Ü¶ (brownian_ae_eq_preBrownian t).symm

lemma isMeasurableKolmogorovProcess_brownian (n : ‚Ñï) :
    IsMeasurableKolmogorovProcess brownian gaussianLimit (2 * n) n
      (Nat.doubleFactorial (2 * n - 1)) where
  measurablePair := measurable_pair_of_measurable measurable_brownian
  kolmogorovCondition := (isMeasurableKolmogorovProcess_preBrownian n).isKolmogorovProcess.congr
    (fun t ‚Ü¶ (brownian_ae_eq_preBrownian t).symm) |>.kolmogorovCondition

lemma iIndepFun_iff_charFun_eq_pi {Œπ Œ© : Type*} [Fintype Œπ] {E : Œπ ‚Üí Type*}
    [‚àÄ i, NormedAddCommGroup (E i)]
    [‚àÄ i, InnerProductSpace ‚Ñù (E i)] [‚àÄ i, MeasurableSpace (E i)]
    {mŒ© : MeasurableSpace Œ©} {Œº : Measure Œ©} [IsProbabilityMeasure Œº] {X : Œ† i, Œ© ‚Üí (E i)}
    [‚àÄ i, CompleteSpace (E i)] [‚àÄ i, BorelSpace (E i)]
    [‚àÄ i, SecondCountableTopology (E i)] (mX : ‚àÄ i, AEMeasurable (X i) Œº) :
    iIndepFun X Œº ‚Üî ‚àÄ t,
      charFun (Œº.map fun œâ ‚Ü¶ toLp 2 (X ¬∑ œâ)) t = ‚àè i, charFun (Œº.map (X i)) (t i) := sorry
-- PR #26269 in Mathlib

instance IsGaussian.eval {Œπ Œ© : Type*} {E : Œπ ‚Üí Type*} [Fintype Œπ] {mŒ© : MeasurableSpace Œ©}
    {P : Measure Œ©} [IsProbabilityMeasure P] [‚àÄ i, NormedAddCommGroup (E i)]
    [‚àÄ i, NormedSpace ‚Ñù (E i)] [‚àÄ i, MeasurableSpace (E i)] [‚àÄ i, BorelSpace (E i)]
    [‚àÄ i, SecondCountableTopology (E i)] {X : (i : Œπ) ‚Üí Œ© ‚Üí E i}
    [h : IsGaussian (P.map (fun œâ ‚Ü¶ (X ¬∑ œâ)))] (i : Œπ) :
    IsGaussian (P.map (X i)) := by
  have : X i = (ContinuousLinearMap.proj (R := ‚Ñù) (œÜ := E) i) ‚àò (fun œâ ‚Ü¶ (X ¬∑ œâ)) := by ext; simp
  rw [this, ‚Üê AEMeasurable.map_map_of_aemeasurable]
  ¬∑ infer_instance
  ¬∑ fun_prop
  by_contra!
  rw [Measure.map_of_not_aemeasurable] at h
  ¬∑ exact h.toIsProbabilityMeasure.ne_zero _ rfl
  ¬∑ exact this

instance HasGaussianLaw.eval {Œπ Œ© : Type*} {E : Œπ ‚Üí Type*} [Fintype Œπ] {mŒ© : MeasurableSpace Œ©}
    {P : Measure Œ©} [IsProbabilityMeasure P] [‚àÄ i, NormedAddCommGroup (E i)]
    [‚àÄ i, NormedSpace ‚Ñù (E i)] [‚àÄ i, MeasurableSpace (E i)] [‚àÄ i, BorelSpace (E i)]
    [‚àÄ i, SecondCountableTopology (E i)] {X : (i : Œπ) ‚Üí Œ© ‚Üí E i}
    [h : HasGaussianLaw (fun œâ ‚Ü¶ (X ¬∑ œâ)) P] (i : Œπ) :
    HasGaussianLaw (X i) P where
  isGaussian_map' := IsGaussian.eval i

lemma test {Œπ Œ© : Type*} [Fintype Œπ] {mŒ© : MeasurableSpace Œ©} {P : Measure Œ©}
    [IsProbabilityMeasure P] {X : Œπ ‚Üí Œ© ‚Üí ‚Ñù}
    [h1 : HasGaussianLaw (fun œâ ‚Ü¶ (X ¬∑ œâ)) P]
    (h2 : ‚àÄ i j : Œπ, i ‚â† j ‚Üí cov[X i, X j; P] = 0) :
    iIndepFun X P := by
  have mX : ‚àÄ i, AEMeasurable (X i) P := aemeasurable_pi_iff.1 h1.aemeasurable
  have (i : Œπ) : (inner ‚Ñù ((EuclideanSpace.basisFun Œπ ‚Ñù) i) ‚àò ‚áë(EuclideanSpace.equiv Œπ ‚Ñù).symm ‚àò
      fun œâ x ‚Ü¶ X x œâ) = X i := by ext; simp [-PiLp.inner_apply]
  refine iIndepFun_iff_charFun_eq_pi mX |>.2 fun Œæ ‚Ü¶ ?_
  change charFun (P.map ((EuclideanSpace.equiv Œπ ‚Ñù).symm ‚àò _)) _ = _
  rw [IsGaussian.charFun_eq, covInnerBilin_self IsGaussian.memLp_two_id]
  nth_rw 1 2 [‚Üê (EuclideanSpace.basisFun Œπ ‚Ñù).sum_repr' Œæ]
  simp_rw [sum_inner, basisFun_inner]
  rw [variance_fun_sum]
  ¬∑ simp_rw [Complex.ofReal_sum, sum_mul, sum_div, ‚Üê sum_sub_distrib, Complex.exp_sum]
    congr with i
    rw [real_inner_smul_left, ‚Üê integral_inner, Finset.sum_eq_single_of_mem i, covariance_self]
    ¬∑ simp_rw [real_inner_smul_left, variance_mul]
      conv =>
        enter [1, 1, 1, 1, 1, 2, 2, x]
        change id (inner ‚Ñù (EuclideanSpace.basisFun Œπ ‚Ñù i) x)
      conv =>
        enter [1, 1, 2, 1, 1, 2, 1]
        change id ‚àò (inner ‚Ñù (EuclideanSpace.basisFun Œπ ‚Ñù i))
      rw [‚Üê integral_map, ‚Üê variance_map, AEMeasurable.map_map_of_aemeasurable]
      ¬∑ rw [this, IsGaussian.charFun_eq, covInnerBilin_real_self]
        ¬∑ simp [mul_comm]
        exact IsGaussian.memLp_two_id
      any_goals fun_prop
    ¬∑ fun_prop
    ¬∑ simp
    ¬∑ rintro j - hj
      simp_rw [real_inner_smul_left, covariance_mul_left, covariance_mul_right]
      rw [covariance_map, this, this, h2 i j hj.symm]
      ¬∑ simp
      any_goals exact Measurable.aestronglyMeasurable (by fun_prop)
      fun_prop
    ¬∑ exact IsGaussian.integrable_id
  intro i
  rw [‚Üê ContinuousBilinForm.inner_apply'', ‚Üê Function.id_comp ‚áë(ContinuousBilinForm.inner _ _),
    ‚Üê memLp_map_measure_iff]
  ¬∑ exact IsGaussian.memLp_two_id
  ¬∑ exact Measurable.aestronglyMeasurable (by fun_prop)
  ¬∑ fun_prop

def indep_incr {Œ© T E : Type*} {mŒ© : MeasurableSpace Œ©} (P : Measure Œ©) [Sub E] [Preorder T]
    [MeasurableSpace E] (X : T ‚Üí Œ© ‚Üí E) : Prop :=
  ‚àÄ n, ‚àÄ t : Fin (n + 2) ‚Üí T, Monotone t ‚Üí
    iIndepFun (fun i : Fin (n + 1) ‚Ü¶ X (t i.succ) - X (t i.castSucc)) P

lemma mem_pair_iff {Œ± : Type*} [DecidableEq Œ±] {x y z : Œ±} :
    x ‚àà ({y, z} : Finset Œ±) ‚Üî x = y ‚à® x = z := by
  simp

lemma cov_brownian (s t : ‚Ñù‚â•0) : cov[brownian s, brownian t; gaussianLimit] = min s t := by
  have h1 : brownian s = (fun x : ({s, t} : Finset ‚Ñù‚â•0) ‚Üí ‚Ñù ‚Ü¶ x ‚ü®s, by simp‚ü©) ‚àò
      (fun œâ ‚Ü¶ ({s, t} : Finset ‚Ñù‚â•0).restrict (brownian ¬∑ œâ)) := by ext; simp
  have h2 : brownian t = (fun x : ({s, t} : Finset ‚Ñù‚â•0) ‚Üí ‚Ñù ‚Ü¶ x ‚ü®t, by simp‚ü©) ‚àò
      (fun œâ ‚Ü¶ ({s, t} : Finset ‚Ñù‚â•0).restrict (brownian ¬∑ œâ)) := by ext; simp
  have : (fun œâ ‚Ü¶ ({s, t} : Finset ‚Ñù‚â•0).restrict (brownian ¬∑ œâ)) =·µê[gaussianLimit]
      (fun œâ ‚Ü¶ ({s, t} : Finset ‚Ñù‚â•0).restrict (preBrownian ¬∑ œâ)) := by
    filter_upwards [brownian_ae_eq_preBrownian s, brownian_ae_eq_preBrownian t] with œâ hœâ‚ÇÅ hœâ‚ÇÇ
    ext r
    obtain hr | hr := mem_pair_iff.1 r.2
    all_goals simp [hr, hœâ‚ÇÅ, hœâ‚ÇÇ]
  rw [h1, h2, ‚Üê covariance_map, Measure.map_congr this]
  ¬∑ simp_rw [preBrownian, hasLaw_restrict_gaussianLimit.map_eq]
    rw [covariance_eval_gaussianProjectiveFamily]
  ¬∑ exact Measurable.aestronglyMeasurable (by fun_prop)
  ¬∑ exact Measurable.aestronglyMeasurable (by fun_prop)
  exact Measurable.aemeasurable <| by fun_prop

lemma indep_incr_bm : indep_incr gaussianLimit brownian := by
  intro n t ht
  apply test
  ¬∑ exact fun i ‚Ü¶ by fun_prop
  ¬∑ have : (fun œâ ‚Ü¶
        (EuclideanSpace.measurableEquiv (Fin (n + 1))).symm
        fun i ‚Ü¶ (brownian (t i.succ) - brownian (t i.castSucc)) œâ) =
        (fun x ‚Ü¶ toLp 2 fun (i : Fin (n + 1)) ‚Ü¶ x i.succ - x i.castSucc) ‚àò
        (fun x (i : Fin (n + 2)) ‚Ü¶ x ‚ü®t i, by simp‚ü©) ‚àò ((Finset.univ.image t).restrict) ‚àò
        (fun œâ t ‚Ü¶ brownian t œâ) := by ext; simp [EuclideanSpace.measurableEquiv]
    rw [this, ‚Üê Function.comp_assoc, ‚Üê Measure.map_map]
    ¬∑ let L : ((Finset.univ.image t) ‚Üí ‚Ñù) ‚ÜíL[‚Ñù] EuclideanSpace ‚Ñù (Fin (n + 1)) :=
        { toFun := (fun x ‚Ü¶ toLp 2 fun (i : Fin (n + 1)) ‚Ü¶ x i.succ - x i.castSucc) ‚àò
            (fun x (i : Fin (n + 2)) ‚Ü¶ x ‚ü®t i, by simp‚ü©)
          map_add' x y := by ext; simp; ring
          map_smul' m x := by ext; simp; ring
          cont := by fun_prop }
      have : (fun x ‚Ü¶ toLp 2 fun (i : Fin (n + 1)) ‚Ü¶ x i.succ - x i.castSucc) ‚àò
          (fun x (i : Fin (n + 2)) ‚Ü¶ x ‚ü®t i, by simp‚ü©) = ‚áëL := rfl
      rw [this]
      refine @isGaussian_map _ _ _ _ _ _ _ _ _ _ _ ?_ L
      exact isGaussianProcess_brownian.restrict (Finset.univ.image t)
    ¬∑ fun_prop
    ¬∑ fun_prop
  intro i j hij
  rw [covariance_sub_left, covariance_sub_right, covariance_sub_right]
  ¬∑ simp_rw [cov_brownian]
    obtain h | h := Fin.lt_or_lt_of_ne hij
    ¬∑ have h1 : i.succ ‚â§ j.succ := Fin.succ_le_succ_iff.mpr h.le
      have h2 : i.succ ‚â§ j.castSucc := h
      have h3 : i.castSucc ‚â§ j.succ := Fin.le_of_lt h1
      have h4 : i.castSucc ‚â§ j.castSucc := Fin.le_castSucc_iff.mpr h1
      rw [min_eq_left (ht h1), min_eq_left (ht h2), min_eq_left (ht h3), min_eq_left (ht h4)]
      simp
    ¬∑ have h1 : j.succ ‚â§ i.succ := Fin.succ_le_succ_iff.mpr h.le
      have h2 : j.succ ‚â§ i.castSucc := h
      have h3 : j.castSucc ‚â§ i.succ := Fin.le_of_lt h1
      have h4 : j.castSucc ‚â§ i.castSucc := Fin.le_castSucc_iff.mpr h1
      rw [min_eq_right (ht h1), min_eq_right (ht h2), min_eq_right (ht h3), min_eq_right (ht h4)]
      simp
  rotate_right
  ¬∑ exact
      (isGaussianProcess_brownian.memLp_eval (by norm_num)).sub
      (isGaussianProcess_brownian.memLp_eval (by norm_num))
  all_goals
    exact isGaussianProcess_brownian.memLp_eval (by norm_num)

section Measure

noncomputable
def wienerMeasureAux : Measure {f : ‚Ñù‚â•0 ‚Üí ‚Ñù // Continuous f} :=
  gaussianLimit.map (fun œâ ‚Ü¶ (‚ü®fun t ‚Ü¶ brownian t œâ, continuous_brownian œâ‚ü©))

section ContinuousMap.MeasurableSpace

variable {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y]

instance : MeasurableSpace C(X, Y) := borel _
instance : BorelSpace C(X, Y) where
  measurable_eq := rfl

lemma isClosed_sUnion_of_finite {X : Type*} [TopologicalSpace X] {s : Set (Set X)}
    (h1 : s.Finite) (h2 : ‚àÄ t ‚àà s, IsClosed t) : IsClosed (‚ãÉ‚ÇÄ s) := by
  rw [Set.sUnion_eq_biUnion]
  exact h1.isClosed_biUnion h2

open TopologicalSpace in
lemma ContinuousMap.borel_eq_iSup_comap_eval [SecondCountableTopology X] [SecondCountableTopology Y]
    [LocallyCompactSpace X] [RegularSpace Y] [MeasurableSpace Y] [BorelSpace Y] :
    borel C(X, Y) = ‚®Ü a : X, (borel Y).comap fun b ‚Ü¶ b a := by
  -- https://math.stackexchange.com/questions/4789531/when-does-the-borel-sigma-algebra-of-compact-convergence-coincide-with-the-pr
  apply le_antisymm
  swap
  ¬∑ refine iSup_le fun x ‚Ü¶ ?_
    simp_rw [‚Üê measurable_iff_comap_le, ‚Üê BorelSpace.measurable_eq]
    exact Continuous.measurable (by fun_prop)
  -- Denote by `M(K, U)` the set of functions `f` such that `Set.MapsTo f K U`. These form a
  -- basis for the compact-open topology when `K` is compact and `U` is open.
  -- Because `C(X, Y)` is second-countable, it suffices to prove that those sets are measurable.
  -- Let therefore `K` be a compact set of `X` and `U` an open set of `Y`.
  rw [borel_eq_generateFrom_of_subbasis ContinuousMap.compactOpen_eq]
  refine MeasurableSpace.generateFrom_le fun s hs ‚Ü¶ ?_
  obtain ‚ü®K, hK, U, hU, hs‚ü© := hs
  rw [‚Üê hs]
  -- Consider `V` a countable basis of the topology on Y.
  let V := countableBasis Y
  have hV : IsTopologicalBasis V := isBasis_countableBasis Y
  have cV : V.Countable := countable_countableBasis Y
  let W‚ÇÅ := {v | v ‚àà V ‚àß closure v ‚äÜ U}
  -- Consider `W` the set of `closure v`, where `v ‚àà V` and `closure v ‚äÜ U`.
  let W := {v | ‚àÉ u ‚àà V, v ‚äÜ U ‚àß v = closure u}
  -- Because `V` is countable, so is `W`.
  have cW : W.Countable := by
    apply (cV.image closure ).mono
    rintro - ‚ü®u, hu, -, rfl‚ü©
    exact ‚ü®u, hu, rfl‚ü©
  -- Because `Y` is regular, we can write that `U = ‚ãÉ_{v ‚àà W} v`.
  have U_eq_sUnion_W : U = ‚ãÉ‚ÇÄ W := by
    ext x
    rw [Set.mem_sUnion]
    constructor
    ¬∑ intro hx
      obtain ‚ü®v, ‚ü®hv1, hv2‚ü©, hv3‚ü© := hV.nhds_basis_closure x |>.mem_iff.1 <| hU.mem_nhds hx
      exact ‚ü®closure v, ‚ü®v, hv2, hv3, rfl‚ü©, subset_closure hv1‚ü©
    ¬∑ rintro ‚ü®-, ‚ü®t, ht1, ht2, rfl‚ü©, hx‚ü©
      exact ht2 hx
  -- Similarly, we can write that `U = ‚ãÉ_{v ‚àà V, closure v ‚äÜ U} v`.
  have U_eq_sUnion_W‚ÇÅ : U = ‚ãÉ‚ÇÄ W‚ÇÅ := by
    ext x
    rw [Set.mem_sUnion]
    refine ‚ü®fun hx ‚Ü¶ ?_, fun ‚ü®t, ‚ü®ht1, ht2‚ü©, hx‚ü© ‚Ü¶ ht2 <| subset_closure hx‚ü©
    obtain ‚ü®v, ‚ü®hv1, hv2‚ü©, hv3‚ü© := hV.nhds_basis_closure x |>.mem_iff.1 <| hU.mem_nhds hx
    exact ‚ü®v, ‚ü®hv2, hv3‚ü©, hv1‚ü©
  -- For any continuous `f` such that `f '' K ‚äÜ U`, because `K` is compact, `f '' K` is compact.
  -- But we just proved that `U = ‚ãÉ_{v ‚àà V, closure v ‚äÜ U} v`, and each `v ‚àà V` is open,
  -- so there exists `J` a finite set of `v ‚àà V` such that `closure v ‚äÜ U` and
  -- `f '' K ‚äÜ ‚ãÉ v ‚àà J, v`. We thus have `f '' K ‚äÜ ‚ãÉ v ‚àà J, closure v`. This is equivalent to
  -- having `I` a finite subset of `W` such that `f '' K ‚äÜ ‚ãÉ v ‚àà I, v`.
  have (f : C(X, Y)) (hf : K.MapsTo f U) : ‚àÉ I, I.Finite ‚àß I ‚äÜ W ‚àß K.MapsTo f (‚ãÉ‚ÇÄ I) := by
    simp_rw [Set.mapsTo'] at hf ‚ä¢
    rw [U_eq_sUnion_W‚ÇÅ, Set.sUnion_eq_biUnion] at hf
    have : ‚àÄ i ‚àà {v | v ‚àà V ‚àß closure v ‚äÜ U}, IsOpen i :=
      fun x ‚ü®hx, _‚ü© ‚Ü¶ hV.isOpen hx
    obtain ‚ü®b, hb1, hb2, hb3‚ü© := (hK.image f.continuous).elim_finite_subcover_image this hf
    refine ‚ü®closure '' b, hb2.image _, ?_, ?_‚ü©
    ¬∑ rintro - ‚ü®v, hv, rfl‚ü©
      exact ‚ü®v, (hb1 hv).1, (hb1 hv).2, rfl‚ü©
    rw [‚Üê Set.sUnion_eq_biUnion] at hb3
    exact hb3.trans <| Set.sUnion_mono_subsets fun _ ‚Ü¶ subset_closure
  -- Therefore, we obtain that
  -- `M(K, U) = ‚ãÉ_{I ‚äÜ W, I finite}, M(K, ‚ãÉ v ‚àà I, v)`.
  have : {f : C(X, Y) | K.MapsTo f U} =
      ‚ãÉ‚ÇÄ {v | ‚àÉ I, I.Finite ‚àß I ‚äÜ W ‚àß v = {f : C(X, Y) | K.MapsTo f (‚ãÉ‚ÇÄ I)}} := by
    ext f
    rw [Set.mem_sUnion]
    refine ‚ü®fun h ‚Ü¶ ?_, ?_‚ü©
    ¬∑ obtain ‚ü®I, hI1, hI2, hI3‚ü© := this f h
      exact ‚ü®{f : C(X, Y) | K.MapsTo f (‚ãÉ‚ÇÄ I)}, ‚ü®I, hI1, hI2, rfl‚ü©, hI3‚ü©
    ¬∑ rintro ‚ü®-, ‚ü®I, hI1, hI2, rfl‚ü©, h‚ü©
      simp only [Set.mapsTo'] at h ‚ä¢
      rw [U_eq_sUnion_W]
      exact h.trans <| Set.sUnion_subset_sUnion hI2
  simp only
  rw [this]
  -- In particular, because `W` is countable, si this is a countable union.
  -- To show measurability it is therefore enough to show the measurability of each term.
  apply MeasurableSet.sUnion
  ¬∑ let f : Set (Set Y) ‚Üí Set C(X, Y) := fun I ‚Ü¶ {f : C(X, Y) | Set.MapsTo (‚áëf) K (‚ãÉ‚ÇÄ I)}
    refine ((Set.countable_setOf_finite_subset cW).image f).mono ?_
    rintro - ‚ü®I, hI1, hI2, rfl‚ü©
    exact ‚ü®I, ‚ü®hI1, hI2‚ü©, rfl‚ü©
  -- Consider now `I` a finite subset of `W`.
  rintro - ‚ü®I, hI1, hI2, rfl‚ü©
  -- First, `‚ãÉ v ‚àà I, v` is closed as a finite union of closed sets.
  have hI : IsClosed (‚ãÉ‚ÇÄ I) := by
    refine isClosed_sUnion_of_finite hI1 fun x hx ‚Ü¶ ?_
    obtain ‚ü®u, -, -, rfl‚ü© := hI2 hx
    exact isClosed_closure
  -- Consider `Q` a countable dense subset of `K`, which exists by second-countability assumption.
  obtain ‚ü®Q, cQ, dQ‚ü© := TopologicalSpace.exists_countable_dense K
  have Q_sub_K : Subtype.val '' Q ‚äÜ K := Subtype.coe_image_subset K Q
  -- Because `f` is continuous and `‚ãÉ v ‚àà I, v` is closed and `Q` is dense in `K`, having
  -- `f '' K ‚äÜ ‚ãÉ v ‚àà I, v` is the same as `f '' Q ‚äÜ ‚ãÉ v ‚àà I, v`.
  have : {f : C(X, Y) | K.MapsTo f (‚ãÉ‚ÇÄ I)} =
      {f : C(X, Y) | (Subtype.val '' Q).MapsTo f (‚ãÉ‚ÇÄ I)} := by
    ext f
    refine ‚ü®fun h x hx ‚Ü¶ h (Q_sub_K hx), fun h x hx ‚Ü¶ ?_‚ü©
    obtain ‚ü®u, hu1, hu2‚ü© := mem_closure_iff_seq_limit.1 <| Subtype.dense_iff.1 dQ hx
    exact hI.mem_of_tendsto ((f.continuous.tendsto x).comp hu2)
      (Filter.Eventually.of_forall fun n ‚Ü¶ h (hu1 n))
  -- We can write `M(Q, ‚ãÉ v ‚àà I, v) = ‚ãÇ q ‚àà Q, (fun f ‚Ü¶ f q) ‚Åª¬π' (‚ãÉ v ‚àà I, v)`.
  have : {f : C(X, Y) | K.MapsTo f (‚ãÉ‚ÇÄ I)} =
      ‚ãÇ q ‚àà Subtype.val '' Q, (fun f ‚Ü¶ f q) ‚Åª¬π' (‚ãÉ‚ÇÄ I) := by
    rw [this]
    ext f
    rw [Set.mem_iInter‚ÇÇ]
    exact ‚ü®fun h x hx ‚Ü¶ h hx, fun h x hx ‚Ü¶ h x hx‚ü©
  rw [this]
  -- This is a countable intersection, so it suffices to prove that each term is measurable.
  -- Because `‚ãÉ v ‚àà I, v` is closed, it is measurable, so it suffices to prove that
  -- for any `q ‚àà Q`, `fun f ‚Ü¶ f q` is measurable for the product œÉ-algebra.
  -- The latter is the coarsest œÉ-algebra which makes the maps `fun f ‚Ü¶ f x` measurable,
  -- so we are done.
  refine MeasurableSet.biInter (cQ.image _)
    fun q hq ‚Ü¶ MeasurableSet.preimage hI.measurableSet (Measurable.le (le_iSup _ q) ?_)
  rw [BorelSpace.measurable_eq (Œ± := Y)]
  exact comap_measurable _

lemma ContinuousMap.measurableSpace_eq_iSup_comap_eval
    [SecondCountableTopology X] [SecondCountableTopology Y]
    [LocallyCompactSpace X] [RegularSpace Y] [MeasurableSpace Y] [BorelSpace Y] :
    (inferInstance : MeasurableSpace C(X, Y))
      = ‚®Ü a : X, (inferInstance : MeasurableSpace Y).comap fun b ‚Ü¶ b a := by
  simp_rw [BorelSpace.measurable_eq, borel_eq_iSup_comap_eval]

lemma ContinuousMap.measurable_iff_eval {Œ± : Type*} [MeasurableSpace Œ±]
    [SecondCountableTopology X] [SecondCountableTopology Y]
    [LocallyCompactSpace X] [RegularSpace Y] [MeasurableSpace Y] [BorelSpace Y]
    (g : Œ± ‚Üí C(X, Y)) :
    Measurable g ‚Üî ‚àÄ (x : X), Measurable fun (a : Œ±) ‚Ü¶ g a x := by
  simp_rw [ContinuousMap.measurableSpace_eq_iSup_comap_eval, measurable_iff_comap_le,
    MeasurableSpace.comap_iSup, iSup_le_iff, MeasurableSpace.comap_comp, Function.comp_def]

end ContinuousMap.MeasurableSpace

def MeasurableEquiv.continuousMap : {f : ‚Ñù‚â•0 ‚Üí ‚Ñù // Continuous f} ‚âÉ·µê C(‚Ñù‚â•0, ‚Ñù) where
  toFun := fun f ‚Ü¶ ContinuousMap.mk f.1 f.2
  invFun := fun f ‚Ü¶ ‚ü®f, f.continuous‚ü©
  left_inv f := rfl
  right_inv f := rfl
  measurable_toFun := by
    simp only [Equiv.coe_fn_mk]
    rw [ContinuousMap.measurable_iff_eval]
    intro x
    simp only [ContinuousMap.coe_mk]
    revert x
    rw [‚Üê measurable_pi_iff]
    exact measurable_subtype_coe
  measurable_invFun := by
    simp only [Equiv.coe_fn_symm_mk]
    refine Measurable.subtype_mk ?_
    rw [measurable_pi_iff]
    exact fun _ ‚Ü¶ Continuous.measurable (by fun_prop)


noncomputable
def wienerMeasure : Measure C(‚Ñù‚â•0, ‚Ñù) := wienerMeasureAux.map MeasurableEquiv.continuousMap

end Measure

end ProbabilityTheory
