/-
Copyright (c) 2025 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import BrownianMotion.Auxiliary.Nat
import BrownianMotion.Auxiliary.NNReal
import BrownianMotion.Gaussian.GaussianProcess
import BrownianMotion.Gaussian.Moment
import BrownianMotion.Gaussian.ProjectiveLimit
import BrownianMotion.Continuity.KolmogorovChentsov

/-!
# Brownian motion

-/

open MeasureTheory NNReal
open scoped ENNReal NNReal

namespace ProbabilityTheory

def preBrownian : ‚Ñù‚â•0 ‚Üí (‚Ñù‚â•0 ‚Üí ‚Ñù) ‚Üí ‚Ñù := fun t œâ ‚Ü¶ œâ t

@[fun_prop]
lemma measurable_preBrownian (t : ‚Ñù‚â•0) : Measurable (preBrownian t) := by
  unfold preBrownian
  fun_prop

lemma isGaussianProcess_preBrownian : IsGaussianProcess preBrownian gaussianLimit := by
  intro I
  simp only [preBrownian, Measure.map_id']
  rw [isProjectiveLimit_gaussianLimit]
  exact isGaussian_gaussianProjectiveFamily I

lemma map_sub_preBrownian (s t : ‚Ñù‚â•0) :
    gaussianLimit.map (preBrownian s - preBrownian t) = gaussianReal 0 (max (s - t) (t - s)) := by
  let I : Finset ‚Ñù‚â•0 := {s, t}
  let L : (I ‚Üí ‚Ñù) ‚ÜíL[‚Ñù] ‚Ñù :=
    ContinuousLinearMap.proj ‚ü®s, by simp [I]‚ü© - ContinuousLinearMap.proj ‚ü®t, by simp [I]‚ü©
  have : preBrownian s - preBrownian t = L ‚àò I.restrict := by
    ext; simp [L, preBrownian, I]
  rw [this, ‚Üê AEMeasurable.map_map_of_aemeasurable (by fun_prop) (by fun_prop),
    isProjectiveLimit_gaussianLimit, IsGaussian.map_eq_gaussianReal, L.integral_comp_id_comm,
    integral_id_gaussianProjectiveFamily, map_zero]
  swap; ¬∑ exact IsGaussian.integrable_id
  congr
  simp only [ContinuousLinearMap.coe_sub', ContinuousLinearMap.coe_proj', I, L]
  rw [variance_sub]
  ¬∑ simp_rw [variance_eval_gaussianProjectiveFamily, covariance_eval_gaussianProjectiveFamily]
    norm_cast
    rw [sub_add_eq_add_sub, ‚Üê NNReal.coe_add, ‚Üê NNReal.coe_sub, Real.toNNReal_coe,
      add_sub_two_mul_min_eq_max]
    nth_grw 1 [two_mul, min_le_left, min_le_right]
  all_goals
    rw [‚Üê ContinuousLinearMap.coe_proj' ‚Ñù]
    exact ContinuousLinearMap.comp_memLp' _ <| IsGaussian.memLp_two_id

lemma isKolmogorovProcess_preBrownian (n : ‚Ñï) :
    IsKolmogorovProcess preBrownian gaussianLimit (2 * n) n (Nat.doubleFactorial (2 * n - 1)) := by
  constructor
  ¬∑ intro s t
    rw [‚Üê BorelSpace.measurable_eq]
    fun_prop
  refine fun s t ‚Ü¶ Eq.le ?_
  norm_cast
  simp_rw [edist_dist, Real.dist_eq]
  change ‚à´‚Åª œâ, (fun x ‚Ü¶ (ENNReal.ofReal |x|) ^ (2 * n))
    ((preBrownian s - preBrownian t) œâ) ‚àÇ_ = _
  rw [‚Üê lintegral_map (f := fun x ‚Ü¶ (ENNReal.ofReal |x|) ^ (2 * n)) (by fun_prop) (by fun_prop),
    map_sub_preBrownian]
  simp_rw [‚Üê fun x ‚Ü¶ ENNReal.ofReal_pow (abs_nonneg x)]
  rw [‚Üê ofReal_integral_eq_lintegral_ofReal]
  ¬∑ simp_rw [pow_two_mul_abs]
    rw [‚Üê centralMoment_of_integral_id_eq_zero _ (by simp), ‚Üê NNReal.sq_sqrt (max _ _)]
    rw [centralMoment_fun_two_mul_gaussianReal, ENNReal.ofReal_mul (by positivity), mul_comm]
    congr
    ¬∑ norm_cast
    ¬∑ norm_cast
      rw [pow_mul, NNReal.sq_sqrt, ‚Üê ENNReal.ofReal_pow dist_nonneg, ‚Üê NNReal.nndist_eq,
        NNReal.coe_pow, coe_nndist]
  ¬∑ simp_rw [‚Üê Real.norm_eq_abs]
    apply MemLp.integrable_norm_pow'
    exact IsGaussian.memLp_id _ _ (ENNReal.natCast_ne_top (2 * n))
  ¬∑ exact ae_of_all _ fun _ ‚Ü¶ by positivity

noncomputable
def brownian : ‚Ñù‚â•0 ‚Üí (‚Ñù‚â•0 ‚Üí ‚Ñù) ‚Üí ‚Ñù :=
  (exists_modification_holder_iSup isCoverWithBoundedCoveringNumber_Ico_nnreal
    (fun n ‚Ü¶ isKolmogorovProcess_preBrownian (n + 2)) (fun n ‚Ü¶ by positivity)
    (fun n ‚Ü¶ by simp; norm_cast; omega)).choose

lemma brownian_ae_eq_preBrownian (t : ‚Ñù‚â•0) :
    brownian t =·µê[gaussianLimit] preBrownian t :=
  (exists_modification_holder_iSup isCoverWithBoundedCoveringNumber_Ico_nnreal
    (fun n ‚Ü¶ isKolmogorovProcess_preBrownian (n + 2)) (fun n ‚Ü¶ by positivity)
    (fun n ‚Ü¶ by simp; norm_cast; omega)).choose_spec.1 t

lemma isHolderWith_brownian {Œ≤ : ‚Ñù‚â•0} (hŒ≤_pos : 0 < Œ≤) (hŒ≤_lt : Œ≤ < 2‚Åª¬π) (œâ : ‚Ñù‚â•0 ‚Üí ‚Ñù) :
    ‚àÉ C : ‚Ñù‚â•0, HolderWith C Œ≤ (brownian ¬∑ œâ) := by
  refine (exists_modification_holder_iSup isCoverWithBoundedCoveringNumber_Ico_nnreal
    (fun n ‚Ü¶ isKolmogorovProcess_preBrownian (n + 2)) (fun n ‚Ü¶ by positivity)
    (fun n ‚Ü¶ by simp; norm_cast; omega)).choose_spec.2 Œ≤ hŒ≤_pos ?_ œâ
  have hŒ≤_lt' : (Œ≤ : ‚Ñù) < 2‚Åª¬π := by norm_cast
  refine hŒ≤_lt'.trans_eq
    (iSup_eq_of_forall_le_of_tendsto (F := Filter.atTop) (fun n ‚Ü¶ ?_) ?_).symm
  ¬∑ calc
    ((‚Üë(n + 2) : ‚Ñù) - 1) / (2 * ‚Üë(n + 2)) = 2‚Åª¬π * (n + 1) / (n + 2) := by field_simp; ring
    _ ‚â§ 2‚Åª¬π * 1 := by grw [mul_div_assoc, (div_le_one‚ÇÄ (by positivity)).2]; linarith
    _ = 2‚Åª¬π := mul_one _
  ¬∑ have : (fun n : ‚Ñï ‚Ü¶ ((‚Üë(n + 2) : ‚Ñù) - 1) / (2 * ‚Üë(n + 2))) =
        (fun n : ‚Ñï ‚Ü¶ 2‚Åª¬π * ((n : ‚Ñù) / (n + 1))) ‚àò (fun n ‚Ü¶ n + 1) := by ext n; field_simp; ring
    rw [this]
    refine Filter.Tendsto.comp ?_ (Filter.tendsto_add_atTop_nat 1)
    nth_rw 2 [‚Üê mul_one 2‚Åª¬π]
    exact (tendsto_natCast_div_add_atTop (1 : ‚Ñù)).const_mul _

lemma aemeasurable_brownian_apply (t : ‚Ñù‚â•0) : AEMeasurable (brownian t) gaussianLimit :=
  ‚ü®preBrownian t, measurable_preBrownian t, brownian_ae_eq_preBrownian t‚ü©

lemma continuous_brownian (œâ : ‚Ñù‚â•0 ‚Üí ‚Ñù) : Continuous (brownian ¬∑ œâ) := by
  obtain ‚ü®C, h‚ü© : ‚àÉ C, HolderWith C 4‚Åª¬π (brownian ¬∑ œâ) := by
    refine isHolderWith_brownian (by norm_num) (NNReal.inv_lt_inv ?_ ?_) œâ
    all_goals norm_num
  exact h.continuous (by norm_num)

theorem measurable_brownian : Measurable (fun œâ t ‚Ü¶ brownian t œâ) := sorry

open NNReal Filter Topology in
lemma _root_.Measurable.measurable_uncurry {Œ© E : Type*} {mŒ© : MeasurableSpace Œ©}
    [TopologicalSpace E] [TopologicalSpace.PseudoMetrizableSpace E] [MeasurableSpace E]
    [BorelSpace E] {X : ‚Ñù‚â•0 ‚Üí Œ© ‚Üí E} (cont : ‚àÄ œâ, Continuous (X ¬∑ œâ))
    (hX : Measurable fun œâ t ‚Ü¶ X t œâ) : Measurable X.uncurry := by
  let Y (n : ‚Ñï) (tœâ : ‚Ñù‚â•0 √ó Œ©) : E := X ((step n tœâ.1 + 1) / 2 ^ n) tœâ.2
  have hY (n : ‚Ñï) (t : ‚Ñù‚â•0) : Measurable (fun œâ ‚Ü¶ Y n (t, œâ)) := by
    simpa [Y] using hX.eval
  have hY n : Measurable (Y n) := by
    intro s hs
    have : Y n ‚Åª¬π' s = {0} √óÀ¢ ((fun œâ ‚Ü¶ Y n (0, œâ)) ‚Åª¬π' s) ‚à™
        ‚ãÉ k : ‚Ñï, (Set.Ioc (k / 2 ^ n : ‚Ñù‚â•0) ((k + 1) / 2 ^ n)) √óÀ¢
          ((fun œâ ‚Ü¶ Y n ((k + 1) / 2 ^ n, œâ)) ‚Åª¬π' s) := by
      ext ‚ü®t, œâ‚ü©
      refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ ?_‚ü©
      ¬∑ obtain rfl | ht := eq_zero_or_pos t
        ¬∑ exact Set.mem_union_left _ (by simpa)
        refine Set.mem_union_right _ <| Set.mem_iUnion.2 ‚ü®step n t, ?_‚ü©
        refine ‚ü®‚ü®step_div_lt ht, le_step_add_one_div t‚ü©, ?_‚ü©
        convert h
        simp [Y]
      ¬∑ simp only [Set.mem_union, Set.mem_prod, Set.mem_singleton_iff, Set.mem_preimage,
          Set.mem_iUnion, Set.mem_Ioc] at h
        obtain ‚ü®rfl, h‚ü© | ‚ü®i, ‚ü®hi1, hi2‚ü©, h‚ü© := h
        ¬∑ exact h
        convert h
        simp only [Set.mem_preimage, step_cast_add_one_div, Y]
        rw [step_eq_of_lt_of_le hi1 hi2]
    rw [this]
    exact measurableSet_singleton 0 |>.prod (hY n 0 hs) |>.union <| .iUnion
      fun _ ‚Ü¶ measurableSet_Ioc.prod (hY n _ hs)
  have this tœâ : Tendsto (fun n ‚Ü¶ Y n tœâ) atTop (ùìù (X.uncurry tœâ)) := by
    simp_rw [Y]
    obtain ‚ü®t, œâ‚ü© := tœâ
    refine cont œâ |>.tendsto t |>.comp ?_
    obtain rfl | ht := eq_zero_or_pos t
    ¬∑ simp [-one_div, ‚Üê one_div_pow]
    have h n : (step n t + 1) / 2 ^ n ‚â§ t + 1 / 2 ^ n := by grw [add_div, step_div_lt ht]
    refine tendsto_of_tendsto_of_tendsto_of_le_of_le (by simp) ?_ (fun _ ‚Ü¶ le_step_add_one_div t) h
    nth_rw 2 [‚Üê add_zero t]
    exact Tendsto.add (by simp) (by simp [-one_div, ‚Üê one_div_pow])
  exact measurable_of_tendsto_metrizable hY <| tendsto_pi_nhds.2 this

open NNReal Filter Topology in
lemma measurable_brownian_uncurry : Measurable brownian.uncurry :=
    measurable_brownian.measurable_uncurry continuous_brownian

lemma isGaussianProcess_brownian : IsGaussianProcess brownian gaussianLimit :=
  isGaussianProcess_preBrownian.modification fun t ‚Ü¶ (brownian_ae_eq_preBrownian t).symm

section Measure

-- Subtype measurable space. The measurable space on `‚Ñù‚â•0 ‚Üí ‚Ñù` is the product of Borel œÉ-algebras
-- #synth MeasurableSpace {f : ‚Ñù‚â•0 ‚Üí ‚Ñù // Continuous f}

noncomputable
def wienerMeasureAux : Measure {f : ‚Ñù‚â•0 ‚Üí ‚Ñù // Continuous f} :=
  gaussianLimit.map (fun œâ ‚Ü¶ (‚ü®fun t ‚Ü¶ brownian t œâ, continuous_brownian œâ‚ü©))

-- Compact-open topology
-- #synth TopologicalSpace C(‚Ñù‚â•0, ‚Ñù)

section ContinuousMap.MeasurableSpace

variable {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y]

instance : MeasurableSpace C(X, Y) := borel _
instance : BorelSpace C(X, Y) where
  measurable_eq := rfl

lemma ContinuousMap.borel_eq_iSup_comap_eval [SecondCountableTopology X] [SecondCountableTopology Y]
    [LocallyCompactSpace X] [RegularSpace Y] [MeasurableSpace Y] [BorelSpace Y] :
    borel C(X, Y) = ‚®Ü a : X, (borel Y).comap fun b ‚Ü¶ b a := by
  -- https://math.stackexchange.com/questions/4789531/when-does-the-borel-sigma-algebra-of-compact-convergence-coincide-with-the-pr
  apply le_antisymm
  swap
  ¬∑ refine iSup_le fun x ‚Ü¶ ?_
    rw [‚Üê measurable_iff_comap_le]
    simp_rw [‚Üê BorelSpace.measurable_eq]
    refine Continuous.measurable ?_
    fun_prop
  sorry

lemma ContinuousMap.measurableSpace_eq_iSup_comap_eval
    [SecondCountableTopology X] [SecondCountableTopology Y]
    [LocallyCompactSpace X] [RegularSpace Y] [MeasurableSpace Y] [BorelSpace Y] :
    (inferInstance : MeasurableSpace C(X, Y))
      = ‚®Ü a : X, (inferInstance : MeasurableSpace Y).comap fun b ‚Ü¶ b a := by
  simp_rw [BorelSpace.measurable_eq, borel_eq_iSup_comap_eval]

lemma ContinuousMap.measurable_iff_eval {Œ± : Type*} [MeasurableSpace Œ±]
    [SecondCountableTopology X] [SecondCountableTopology Y]
    [LocallyCompactSpace X] [RegularSpace Y] [MeasurableSpace Y] [BorelSpace Y]
    (g : Œ± ‚Üí C(X, Y)) :
    Measurable g ‚Üî ‚àÄ (x : X), Measurable fun (a : Œ±) ‚Ü¶ g a x := by
  simp_rw [ContinuousMap.measurableSpace_eq_iSup_comap_eval, measurable_iff_comap_le,
    MeasurableSpace.comap_iSup, iSup_le_iff, MeasurableSpace.comap_comp, Function.comp_def]

end ContinuousMap.MeasurableSpace

def MeasurableEquiv.continuousMap : {f : ‚Ñù‚â•0 ‚Üí ‚Ñù // Continuous f} ‚âÉ·µê C(‚Ñù‚â•0, ‚Ñù) where
  toFun := fun f ‚Ü¶ ContinuousMap.mk f.1 f.2
  invFun := fun f ‚Ü¶ ‚ü®f, f.continuous‚ü©
  left_inv f := rfl
  right_inv f := rfl
  measurable_toFun := by
    simp only [Equiv.coe_fn_mk]
    rw [ContinuousMap.measurable_iff_eval]
    intro x
    simp only [ContinuousMap.coe_mk]
    revert x
    rw [‚Üê measurable_pi_iff]
    exact measurable_subtype_coe
  measurable_invFun := by
    simp only [Equiv.coe_fn_symm_mk]
    refine Measurable.subtype_mk ?_
    rw [measurable_pi_iff]
    exact fun _ ‚Ü¶ Continuous.measurable (by fun_prop)


noncomputable
def wienerMeasure : Measure C(‚Ñù‚â•0, ‚Ñù) := wienerMeasureAux.map MeasurableEquiv.continuousMap

end Measure

end ProbabilityTheory
