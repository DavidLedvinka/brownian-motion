/-
Copyright (c) 2025 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import Mathlib
import BrownianMotion.Auxiliary.MeasureTheory
import BrownianMotion.Gaussian.Fernique
import BrownianMotion.Gaussian.Gaussian


/-!
# Multivariate Gaussian distributions
-/

open MeasureTheory ProbabilityTheory Filter Matrix NormedSpace
open scoped ENNReal NNReal Topology RealInnerProductSpace

namespace ProbabilityTheory

variable {E : Type*} [NormedAddCommGroup E] [InnerProductSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]
  [MeasurableSpace E]
  {d : ‚Ñï}

variable (E) in
/-- Standard Gaussian distribution on `E`. -/
noncomputable
def stdGaussian : Measure E :=
  (Measure.pi (fun _ : Fin (Module.finrank ‚Ñù E) ‚Ü¶ gaussianReal 0 1)).map
    (fun x ‚Ü¶ ‚àë i, x i ‚Ä¢ stdOrthonormalBasis ‚Ñù E i)

variable [BorelSpace E]

instance isProbabilityMeasure_stdGaussian : IsProbabilityMeasure (stdGaussian E) :=
    isProbabilityMeasure_map (Measurable.aemeasurable (by fun_prop))

-- TODO: generalize to `f` taking values in a Banach space
lemma integrable_eval_pi {Œπ ùïú : Type*} [Fintype Œπ] [NormedCommRing ùïú] {X : Œπ ‚Üí Type*} {i : Œπ}
    {mX : ‚àÄ i, MeasurableSpace (X i)} {Œº : (i : Œπ) ‚Üí Measure (X i)}
    [‚àÄ i, IsFiniteMeasure (Œº i)] {f : X i ‚Üí ùïú} (hf : Integrable f (Œº i)) :
    Integrable (fun x ‚Ü¶ f (x i)) (Measure.pi Œº) := by
  classical
  let g : Œ† i, X i ‚Üí ùïú := fun j ‚Ü¶ if h : j = i then h ‚ñ∏ f else 1
  have : (fun x ‚Ü¶ ‚àè j, g j (x j)) = fun (x : Œ† i, X i) ‚Ü¶ f (x i) := by
    ext x
    rw [show f (x i) = g i (x i) by simp [g]]
    exact Finset.prod_eq_single_of_mem i (by simp) (fun j _ hj ‚Ü¶ by simp [g, hj])
  rw [‚Üê this]
  refine Integrable.fintype_prod_dep fun j ‚Ü¶ ?_
  by_cases h : j = i
  ¬∑ cases h; simpa [g]
  ¬∑ simpa [g, h] using integrable_const 1

-- TODO: generalize to `f` taking values in a Banach space
lemma integral_eval_pi {Œπ ùïú : Type*} [Fintype Œπ] [RCLike ùïú] {X : Œπ ‚Üí Type*} {i : Œπ}
    {mX : ‚àÄ i, MeasurableSpace (X i)} {Œº : (i : Œπ) ‚Üí Measure (X i)}
    [‚àÄ i, IsProbabilityMeasure (Œº i)] {f : X i ‚Üí ùïú} :
    ‚à´ (x : Œ† i, X i), f (x i) ‚àÇMeasure.pi Œº = ‚à´ x, f x ‚àÇŒº i := by
  classical
  let g : Œ† i, X i ‚Üí ùïú := fun j ‚Ü¶ if h : j = i then h ‚ñ∏ f else 1
  have : (fun x ‚Ü¶ ‚àè j, g j (x j)) = fun (x : Œ† i, X i) ‚Ü¶ f (x i) := by
    ext x
    rw [show f (x i) = g i (x i) by simp [g]]
    exact Finset.prod_eq_single_of_mem i (by simp) (fun j _ hj ‚Ü¶ by simp [g, hj])
  rw [‚Üê this, integral_fintype_prod_eq_prod, show ‚à´ x, f x ‚àÇŒº i = ‚à´ x, g i x ‚àÇŒº i by simp [g]]
  exact Finset.prod_eq_single_of_mem i (by simp) (fun j _ hj ‚Ü¶ by simp [g, hj])

lemma integral_id_stdGaussian : ‚à´ x, x ‚àÇ(stdGaussian E) = 0 := by
  rw [stdGaussian, integral_map _ (by fun_prop)]
  swap; ¬∑ exact (Finset.measurable_sum _ (by fun_prop)).aemeasurable -- todo: add fun_prop tag
  rw [integral_finset_sum]
  swap
  ¬∑ refine fun i _ ‚Ü¶ Integrable.smul_const ?_ _
    convert integrable_eval_pi (i := i) (f := id) ?_
    ¬∑ infer_instance
    ¬∑ rw [‚Üê memLp_one_iff_integrable]
      exact memLp_id_gaussianReal 1
  refine Finset.sum_eq_zero fun i _ ‚Ü¶ ?_
  have : (‚à´ (a : Fin (Module.finrank ‚Ñù E) ‚Üí ‚Ñù), a i ‚àÇMeasure.pi fun x ‚Ü¶ gaussianReal 0 1)
      = ‚à´ x, x ‚àÇgaussianReal 0 1 := by
    convert integral_eval_pi (i := i)
    ¬∑ rfl
    ¬∑ infer_instance
  simp [integral_smul_const, this]

lemma isCentered_stdGaussian : ‚àÄ L : Dual ‚Ñù E, (stdGaussian E)[L] = 0 := by
  intro L
  rw [L.integral_comp_id_comm, integral_id_stdGaussian, map_zero]
  rw [stdGaussian, integrable_map_measure]
  ¬∑ rw [Function.id_comp]
    exact integrable_finset_sum _ fun i _ ‚Ü¶ Integrable.smul_const
      (integrable_eval_pi (f := id) (IsGaussian.integrable_id _)) _
  ¬∑ exact aestronglyMeasurable_id
  ¬∑ exact Measurable.aemeasurable (by fun_prop)

lemma variance_pi {Œπ : Type*} [Fintype Œπ] {Œ© : Œπ ‚Üí Type*} {mŒ© : ‚àÄ i, MeasurableSpace (Œ© i)}
    {Œº : (i : Œπ) ‚Üí Measure (Œ© i)} [‚àÄ i, IsProbabilityMeasure (Œº i)] {X : Œ† i, Œ© i ‚Üí ‚Ñù}
    (h : ‚àÄ i, MemLp (X i) 2 (Œº i)) :
    Var[‚àë i, fun œâ ‚Ü¶ X i (œâ i); Measure.pi Œº] = ‚àë i, Var[X i; Œº i] := by
  rw [IndepFun.variance_sum]
  ¬∑ congr with i
    change Var[(X i) ‚àò (fun œâ ‚Ü¶ œâ i); Measure.pi Œº] = _
    rw [‚Üê variance_map, (measurePreserving_eval i).map_eq]
    ¬∑ rw [(measurePreserving_eval i).map_eq]
      exact (h i).aestronglyMeasurable.aemeasurable
    ¬∑ exact Measurable.aemeasurable (by fun_prop)
  ¬∑ exact fun i _ ‚Ü¶ (h i).comp_measurePreserving (measurePreserving_eval i)
  ¬∑ exact fun i _ j _ hij ‚Ü¶
      (iIndepFun_pi‚ÇÄ fun i ‚Ü¶ (h i).aestronglyMeasurable.aemeasurable).indepFun hij

lemma variance_dual_stdGaussian (L : Dual ‚Ñù E) :
    Var[L; stdGaussian E] = ‚àë i, L (stdOrthonormalBasis ‚Ñù E i) ^ 2 := by
  rw [stdGaussian, variance_map]
  ¬∑ have : L ‚àò (fun x : Fin (Module.finrank ‚Ñù E) ‚Üí ‚Ñù ‚Ü¶ ‚àë i, x i ‚Ä¢ stdOrthonormalBasis ‚Ñù E i) =
        ‚àë i, (fun x : Fin (Module.finrank ‚Ñù E) ‚Üí ‚Ñù ‚Ü¶ L (stdOrthonormalBasis ‚Ñù E i) * x i) := by
      ext x; simp [mul_comm]
    rw [this, variance_pi]
    ¬∑ change ‚àë i, Var[fun x ‚Ü¶ _ * (id x); gaussianReal 0 1] = _
      simp_rw [variance_mul, variance_id_gaussianReal]
      simp
    ¬∑ exact fun i ‚Ü¶ ((isGaussian_gaussianReal 0 1).memLp_two_id _).const_mul _
  ¬∑ exact L.continuous.aemeasurable
  ¬∑ exact Measurable.aemeasurable (by fun_prop)

theorem _root_.OrthonormalBasis.sum_sq_inner_right {Œπ E : Type*} [NormedAddCommGroup E]
    [InnerProductSpace ‚Ñù E] [Fintype Œπ] (b : OrthonormalBasis Œπ ‚Ñù E) (x : E) :
    ‚àë i : Œπ, ‚ü™b i, x‚ü´ ^ 2 = ‚Äñx‚Äñ ^ 2 := by
  rw [‚Üê b.sum_sq_norm_inner]
  simp

theorem _root_.OrthonormalBasis.sum_sq_inner_left {Œπ E : Type*} [NormedAddCommGroup E]
    [InnerProductSpace ‚Ñù E] [Fintype Œπ] (b : OrthonormalBasis Œπ ‚Ñù E) (x : E) :
    ‚àë i : Œπ, ‚ü™x, b i‚ü´ ^ 2 = ‚Äñx‚Äñ ^ 2 := by
  simp_rw [‚Üê b.sum_sq_inner_right, real_inner_comm]

lemma charFun_stdGaussian (t : E) : charFun (stdGaussian E) t = Complex.exp (- ‚Äñt‚Äñ ^ 2 / 2) := by
  rw [charFun_apply, stdGaussian, integral_map]
  ¬∑ simp_rw [sum_inner, Complex.ofReal_sum, Finset.sum_mul, Complex.exp_sum,
      integral_fintype_prod_eq_prod
        (f := fun i x ‚Ü¶ Complex.exp (‚ü™x ‚Ä¢ stdOrthonormalBasis ‚Ñù E i, t‚ü´ * Complex.I)),
      inner_smul_left, mul_comm _ (‚ü™_, _‚ü´), Complex.ofReal_mul, conj_trivial,
      ‚Üê charFun_apply_real, charFun_gaussianReal]
    simp only [Complex.ofReal_zero, mul_zero, zero_mul, NNReal.coe_one, Complex.ofReal_one, one_mul,
      zero_sub]
    simp_rw [‚Üê Complex.exp_sum, Finset.sum_neg_distrib, ‚Üê Finset.sum_div, ‚Üê Complex.ofReal_pow,
      ‚Üê Complex.ofReal_sum, ‚Üê (stdOrthonormalBasis ‚Ñù E).sum_sq_inner_right, neg_div]
  ¬∑ exact Measurable.aemeasurable (by fun_prop)
  ¬∑ exact Measurable.aestronglyMeasurable (by fun_prop)

instance isGaussian_stdGaussian : IsGaussian (stdGaussian E) := by
  refine isGaussian_iff_gaussian_charFun.2 ?_
  use 0, ContinuousBilinForm.inner E, ContinuousBilinForm.isPosSemidef_inner
  simp [charFun_stdGaussian, real_inner_self_eq_norm_sq, neg_div]

lemma covInnerBilin_stdGaussian_eq :
    covInnerBilin (stdGaussian E) = ContinuousBilinForm.inner E := by
  refine gaussian_charFun_congr 0 _ ContinuousBilinForm.isPosSemidef_inner (fun t ‚Ü¶ ?_) |>.2.symm
  simp [charFun_stdGaussian, real_inner_self_eq_norm_sq, neg_div]

lemma covMatrix_stdGaussian_eq : covMatrix (stdGaussian E) = 1 := by
  rw [covMatrix, covInnerBilin_stdGaussian_eq, ContinuousBilinForm.inner_toMatrix_eq_one]

noncomputable
def multivariateGaussian (Œº : EuclideanSpace ‚Ñù (Fin d)) (S : Matrix (Fin d) (Fin d) ‚Ñù)
    (hS : S.PosSemidef) :
    Measure (EuclideanSpace ‚Ñù (Fin d)) :=
  (stdGaussian (EuclideanSpace ‚Ñù (Fin d))).map (fun x ‚Ü¶ Œº + toEuclideanCLM (ùïú := ‚Ñù) hS.sqrt x)

variable {Œº : EuclideanSpace ‚Ñù (Fin d)} {S : Matrix (Fin d) (Fin d) ‚Ñù} {hS : S.PosSemidef}

instance isGaussian_multivariateGaussian : IsGaussian (multivariateGaussian Œº S hS) := by
  sorry

end ProbabilityTheory
